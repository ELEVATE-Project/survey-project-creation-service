version: '3'
services:
  zookeeper:
    image: 'bitnami/zookeeper:3.8.0'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - elevate_net
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    logging:
      driver: none
  kafka:
    image: 'bitnami/kafka:3.1.0'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - elevate_net
    volumes:
      - kafka-data:/bitnami/kafka
    logging:
      driver: none
  mongo:
    image: 'mongo:4.4.14'
    restart: 'always'
    ports:
      - '27017:27017'
    networks:
      - elevate_net
    volumes:
      - mongo-data:/data/db
    logging:
      driver: none
  redis:
    image: 'redis:7.0.0'
    restart: 'always'
    ports:
      - '6379:6379'
    networks:
      - elevate_net
    logging:
      driver: none
  # redis_bullmq:
  #   image: 'redis:7.0.0'
  #   container_name: redis_bullmq
  #   restart: 'always'
  #   command: redis-server --appendonly yes --maxmemory-policy noeviction
  #   ports:
  #     - '6380:6379'
  #   networks:
  #     - elevate_net
  #   volumes:
  #     - redis_data:/data

  mentoring:
    build: './'
    image: elevate/mentoring:1.0
    volumes:
      - ./src/:/var/src
    ports:
      - '3000:3000'
    command: ['nodemon', 'app.js']
    environment:
      - MONGODB_URL=mongodb://mongo:27017/elevate-mentoring
      - KAFKA_URL=kafka:9092
      - USER_SERIVCE_HOST=http://user:3001
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master:5432/mentoring-local
    depends_on:
      - kafka
      - mongo
    networks:
      - elevate_net
  user:
    build: '../user/'
    image: elevate/user:1.0
    volumes:
      - ../user/src/:/var/src
    ports:
      - '3001:3001'
    command: ['nodemon', 'app.js']
    environment:
      - MONGODB_URL=mongodb://mongo:27017/elevate-users
      - KAFKA_URL=kafka:9092
      - REDIS_HOST=redis://redis:6379
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master:5432/user-local
    depends_on:
      - kafka
      - mongo
      - redis
    networks:
      - elevate_net
  notification:
    build: '../notification/'
    image: elevate/notification:1.0
    volumes:
      - ../notification/src/:/var/src
    ports:
      - '3002:3002'
    command: ['nodemon', 'app.js']
    environment:
      - KAFKA_HOST=kafka:9092
    depends_on:
      - kafka
      - mongo
    networks:
      - elevate_net
  scheduler:
    build: '../scheduler/'
    image: elevate/notificatschedulerion:1.0
    volumes:
      - ../scheduler/src/:/var/src
    ports:
      - '4000:4000'
    command: ['nodemon', 'app.js']
    environment:
      - KAFKA_URL=kafka:9092
      - MONGODB_URL=mongodb://mongo:27017/elevate-scheduler
    depends_on:
      - kafka
      - mongo
      - redis
    networks:
      - elevate_net

  # master:
  #   container_name: 'citus_master'
  #   image: 'citusdata/citus:11.2.0'
  #   ports: ['${COORDINATOR_EXTERNAL_PORT:-5432}:5432']
  #   labels: ['com.citusdata.role=Master']
  #   environment: &AUTH
  #     POSTGRES_USER: '${POSTGRES_USER:-postgres}'
  #     POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
  #     PGUSER: '${POSTGRES_USER:-postgres}'
  #     PGPASSWORD: '${POSTGRES_PASSWORD:-postgres}'
  #     POSTGRES_HOST_AUTH_METHOD: '${POSTGRES_HOST_AUTH_METHOD:-trust}'
  #   networks:
  #     - elevate_net
  # worker:
  #   image: 'citusdata/citus:11.2.0'
  #   labels: ['com.citusdata.role=Worker']
  #   depends_on: [manager]
  #   environment: *AUTH
  #   command: '/wait-for-manager.sh'
  #   volumes:
  #     - healthcheck-volume:/healthcheck
  #   networks:
  #     - elevate_net
  # manager:
  #   container_name: '${COMPOSE_PROJECT_NAME:-citus}_manager'
  #   image: 'citusdata/membership-manager:0.3.0'
  #   volumes:
  #     - '${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock'
  #     - healthcheck-volume:/healthcheck
  #   depends_on: [master]
  #   environment: *AUTH
  #   networks:
  #     - elevate_net

  citus:
    image: citusdata/citus:11.2.0
    container_name: 'citus_master'
    ports:
      - 5432:5432
    # command: >
    #   bash -c "while ! pg_isready -h localhost -U postgres -q; do sleep 1; done &&
    #   psql -h localhost -U postgres -d <database_name> -c 'CREATE EXTENSION citus; SELECT create_distributed_table(\"notification_templates\", \"id\");'"
    environment: &AUTH
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      PGUSER: '${POSTGRES_USER:-postgres}'
      PGPASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_DB: 'user-local'
      POSTGRES_HOST_AUTH_METHOD: '${POSTGRES_HOST_AUTH_METHOD:-trust}'
    networks:
      - elevate_net
networks:
  elevate_net:
    external: false
volumes:
  zookeeper-data:
  kafka-data:
  mongo-data:
  redis_data:
  healthcheck-volume:
