version: 2.1 # CircleCI version
orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0
jobs:
  build:
    machine: #Linux machine instead of docker environment
      image: ubuntu-2004:2024.05.1
      resource_class: large
    working_directory: ~/survey-project-creation-service # Default working directory
    steps:
      - checkout:
          path: ~/survey-project-creation-service/
      - restore_cache:
          key: survey-project-creation-service-dependency-cache-{{ checksum "src/package.json" }}
      - run:
          name: Install dependencies
          command: cd src/ && npm install #cd ../src/ && pwd &&
      - save_cache:
          key: survey-project-creation-service-dependency-cache-{{checksum "src/package.json"}}
          paths:
            - ./src/node_modules
      - store_artifacts:
          path: src/coverage/
          destination: /coverage/
      - run:
          name: Checking prerequisites
          command: |
            docker-compose --version
            sudo apt-get install netcat
      - run:
          name: Cloning user service
          command: cd ../ && git clone https://github.com/ELEVATE-Project/user.git --branch develop --single-branch
      - restore_cache:
          key: user-dependency-cache-{{ checksum "../user/src/package.json" }}
      - run:
          name: Install User service dependencies
          command: cd ../user/src/ && npm install #cd ../src/ && pwd &&
      - save_cache:
          key: user-dependency-cache-{{checksum "../user/src/package.json"}}
          paths:
            - ../user/src/node_modules
      - run:
          name: Check current path before replace scp
          command: pwd

      - run:
          name: Replace Survey Project Creation Service environment variables
          command: |
            echo "CLOUD_STORAGE_PROVIDER=$CLOUD_STORAGE_PROVIDER" > dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_STORAGE_ACCOUNTNAME=$CLOUD_STORAGE_ACCOUNTNAME" >> dev-ops/dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_STORAGE_SECRET=$CLOUD_STORAGE_SECRET" >> dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_STORAGE_BUCKETNAME=$CLOUD_STORAGE_BUCKETNAME" >> dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_STORAGE_REGION=$CLOUD_STORAGE_REGION" >> dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_STORAGE_PROJECT=$CLOUD_STORAGE_PROJECT" >> dev-ops/integration_test_self_creation_portal_env
            echo "CLOUD_ENDPOINT=$CLOUD_ENDPOINT" >> dev-ops/integration_test_self_creation_portal_env
            ls -l dev-ops/integration_test_self_creation_portal_env # Check that the file is created
            cat dev-ops/integration_test_self_creation_portal_env # Verify content for debugging

      - run:
          name: Check current path before replace user 
          command: pwd
      - run:
          name: Replace User Service environment variables
          command: |
            echo "CLOUD_STORAGE_PROVIDER=$CLOUD_STORAGE_PROVIDER" > dev-ops/integration_test_user_env
            echo "CLOUD_STORAGE_ACCOUNTNAME=$CLOUD_STORAGE_ACCOUNTNAME" >> dev-ops/integration_test_user_env
            echo "CLOUD_STORAGE_SECRET=$CLOUD_STORAGE_SECRET" >> dev-ops/integration_test_user_env
            echo "CLOUD_STORAGE_BUCKETNAME=$CLOUD_STORAGE_BUCKETNAME" >> dev-ops/integration_test_user_env
            echo "CLOUD_STORAGE_REGION=$CLOUD_STORAGE_REGION" >> dev-ops/integration_test_user_env
            echo "CLOUD_STORAGE_PROJECT=$CLOUD_STORAGE_PROJECT" >> dev-ops/integration_test_user_env
            echo "CLOUD_ENDPOINT=$CLOUD_ENDPOINT" >> dev-ops/integration_test_user_env
            ls -l dev-ops/integration_test_user_env # Check that the file is created
            cat dev-ops/integration_test_user_env # Verify content for debugging
      
      - run:
          name: Starting the docker containers
          command: |-
            cd dev-ops/ && docker-compose -f testing-docker-compose.yml up --build -d
      - run:
          name: Wait for PostgreSQL to be Ready
          command: |
            echo "Waiting for PostgreSQL to be ready on port 5432..."
            timeout 60 bash -c "until nc -z localhost 5432; do sleep 1; done"
            echo "PostgreSQL is up"
      - run:
          name: Wait for User Service to be Ready
          command: |
            echo "Waiting for User Service to be ready on port 5001..."
            timeout 60 bash -c "until nc -z localhost 5001; do sleep 1; done"
            echo "User Service is up"
      - run:
          name: Wait for Survey Project Creation Service to be Ready
          command: |
            echo "Waiting for Survey Project Creation Service to be ready on port 6001..."
            timeout 60 bash -c "until nc -z localhost 6001; do sleep 1; done"
            echo "Survey Project Creation Service is up"
      - run: 
          name: Check docker logs
          command: |-
            docker ps && docker-compose logs --tail=1000
      - run:
          name: Create test results directory
          command: mkdir -p ./dev-ops/report
      - run:
          name: Running test cases
          command: |
            cd src/ && npm run test:integration
      - store_test_results:
          path: ./dev-ops/report
workflows:
  build-and-test: # This is the name of the workflow,
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build:
          context:
            - SonarCloud
          filters:
            tags:
              only: \b(dev|develop|main)\b
