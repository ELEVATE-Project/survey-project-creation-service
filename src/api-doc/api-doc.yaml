openapi: 3.0.0
info:
  title: Elevate Survey Project Creation Portal Service
  version: 1.0.0
  description: >-
    - The Survey Project Creation Portal Service is a centralized service that supports designing of resources.

    - The URL to access the Creation Portal API(s) is `{context}/scp/v1` -
    <b>Note:</b> These resources can be used in other services.
  contact:
    email: tech-infra@shikshalokam.org
servers:
  - url: http://localhost:3006
    description: local server. NB :- port may vary according to the local setup.
  - url: https://dev.elevate-apis.shikshalokam.org/
    description: dev server
paths:
  /scp/v1/modules/create:
    post:
      summary: Creating new modules
      tags:
        - Modules
      description: |-
        This API is associated with modules
         - Endpoint for creating modules  `/scp/v1/modules/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      Id:
                        type: number
                      code:
                        type: string
                      status:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module created successfully
                    result:
                      id: 6
                      code: project
                      status: ACTIVE
        '400':
          description: Bad request. module already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    meta:
                      correlation: 32016da1-8bf1-4157-afad-34508aa609c8
                    message: module already exists
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: Unique code for modules.
              required:
                - code
            examples:
              example1:
                value:
                  code: project
    parameters: []
  /scp/v1/modules/update/{id}:
    post:
      summary: Update modules by id
      tags:
        - Modules
      description: |-
        You can use this API to update modules by id
         - The API Endpoint for updating modules `/scp/v1/modules/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
              required:
                - code
            examples:
              example1:
                value:
                  code: project
                  status: INACTIVE
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      code:
                        type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module updated successfully
                    result:
                      id: 6
                      code: project
                      status: INACTIVE
                    meta:
                      correlation: dea5b252-75d2-40ed-a5a7-f8dec087467e
        '400':
          description: Bad Request. Module not Found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/updateModule400Response'
  /scp/v1/modules/list?page={page}&limit={limit}&search={search}:
    get:
      summary: Get list of modules
      tags:
        - Modules
      description: |-
        You can use this API to get a list of modules
         - The API Endpoint for getting a list of modules is `/scp/v1/modules/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          required: true
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          schema:
            type: string
        - in: path
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: path
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 2
        - in: path
          name: search
          description: Please search for information such as 'code'.
          schema:
            type: string
          example: project
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            code:
                              type: string
                            status:
                              type: string
                          required:
                            - id
                            - code
                            - status
                      count:
                        type: number
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module fetched successfully
                    result:
                      data:
                        - id: 6
                          code: project
                          status: ACTIVE
                        - id: 2
                          code: observation
                          status: ACTIVE
                        - id: 4
                          code: program
                          status: ACTIVE
                        - id: 5
                          code: system
                          status: ACTIVE
                      count: 4
                    meta:
                      correlation: 4cbb42f7-ed92-41a1-b93d-d689121cda08
        '400':
          description: Bad Request. Module Not Found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/getModuleList400Response'
  /scp/v1/modules/delete/{id}:
    delete:
      summary: Delete modules by id
      tags:
        - Modules
      description: |-
        You can use this API to delete module
         - The API Endpoint for deleting modules is `/scp/v1/modules/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content: {}
      responses:
        '202':
          description: Deleted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module deleted successfully
                    result: {}
                    meta:
                      correlation: 471d834a-4954-4564-ae91-6a1f24bec1e5
        '400':
          description: Bad Request. Module not found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/updateModule400Response'

  /scp/v1/permissions/create:
    post:
      summary: Creating new permissions
      tags:
        - Permissions
      description: |-
        This API is associated with permissions
         - Endpoint for creating permissions  `/scp/v1/permissions/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission created successfully
                    result:
                      id: 18
                      code: create_project
                      module: project
                      request_type:
                        - POST
                      api_path: /scp/v1/project/create
                      status: ACTIVE
        '400':
          description: Bad request. Permission already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    meta:
                      correlation: 32016da1-8bf1-4157-afad-34508aa609c8
                    message: permission already exists
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: Must be unique
                module:
                  type: string
                  description: 'module name'
                request_type:
                  type: array
                  description: Array of HTTP request methods of the API like `PUT` , `POST` , `PATCH` , `GET` , `DELETE`.
                  items:
                    type: string
                api_path:
                  type: string
                  description: Url of the api
                status:
                  type: string
                  description: Status of the permission.
              required:
                - code
                - module
                - request_type
                - api_path
            examples:
              example1:
                value:
                  code: create_project
                  module: project
                  request_type:
                    - POST
                  api_path: /scp/v1/project/create
                  status: ACTIVE
    parameters: []
  /scp/v1/permissions/update/{id}:
    post:
      summary: Update permissions by id
      tags:
        - Permissions
      description: |-
        You can use this API to update permissions
         - The API Endpoint for updating permissions is `/scp/v1/permissions/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
        - name: id
          in: path
          description: Id of the permission to update.
          required: true
          schema:
            type: number
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: code of the permission
                module:
                  type: string
                  description: module of the permission
                request_type:
                  type: array
                  items:
                    type: string
                  description: 'request type of the api '
                api_path:
                  type: string
                  description: Url of the api
                status:
                  type: string
                  description: status of the permission
            examples:
              example1:
                value:
                  code: create_project
                  module: project
                  actions: WRITE
                  status: ACTIVE
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      Id:
                        type: number
                      status:
                        type: string
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission updated successfully
                    result:
                      id: 18
                      code: create_project
                      status: ACTIVE
                      module: project
                      request_type:
                        - POST
                      api_path: /scp/v1/project/create

        '400':
          description: Bad Request. Permission not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/permissions/updatePermission400Response'
  /scp/v1/permissions/list?page={page}&limit={limit}&search={search}:
    get:
      summary: Get list of permissions
      tags:
        - Permissions
      description: >-
        You can use this API to get the list of permissions 

         - The API Endpoint for getting a list of permissions is `/scp/v1/permissions/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1

        - in: path
          name: limit
          description: Number of records to limit
          required: false
          schema:
            type: number
          example: 2
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      count:
                        type: number
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            code:
                              type: string
                            module:
                              type: string
                            request_type:
                              type: array
                            items:
                              type: string
                            api_path:
                              type: string
                            status:
                              type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permissions fetched successfully.
                    result:
                      data:
                        - id: 18
                          code: create_project
                          module: project
                          request_type:
                            - POST
                          status: ACTIVE
                          api_path: '/scp/v1/project/create'
                      count: 1
  /scp/v1/permissions/delete/{id}:
    delete:
      summary: Delete permissions by id
      tags:
        - Permissions
      description: |-
        You can use this API to delete permission  
         - The API Endpoint for deleting permissions is `/scp/v1/permissions/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the permission to delete.
          required: true
          schema:
            type: number
            example: 2
      responses:
        '202':
          description: Deleted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission deleted successfully
                    result: {}
                    meta:
                      correlation: a3f7cde4-83f2-4143-a5c4-7e3291085cb4
        '400':
          description: Bad Request. Permission not found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/permissions/updatePermission400Response'

  /scp/v1/role-permission-mapping/create/{role_id}:
    post:
      summary: Creating new role permission mapping
      tags:
        - Role Permission Mapping
      description: |-
        This API is associated with Role Permissions
         - Endpoint for creating Role Permission mapping  `/scp/v1/role-permission-mapping/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
        - name: role_id
          in: path
          description: >-
            Pass the `role_id` of the user role to add permissions.
          required: true
          schema:
            type: number
          example: 2
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                permission_id:
                  type: number
              required:
                - permission_id
            examples:
              example1:
                value:
                  permission_id: 1
      responses:
        '201':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      role_title:
                        type: number
                      permissionId:
                        type: number
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission added to the role
                    result:
                      role_title: CONTENT_CREATOR
                      permissionId: 1
                      module: project
                      request_type:
                        - POST

        '400':
          description: Bad request. Permission for this role already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    message: Permission for this role already exists

    parameters: []
  /scp/v1/role-permission-mapping/delete/{role_id}:
    delete:
      summary: Delete rolePermissionMapping by id
      tags:
        - Role Permission Mapping
      description: |-
        You can use this API to delete Role Permission mapping
         - The API Endpoint for deleting Role Permissions is `/scp/v1/role-permission-mapping/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                permission_id:
                  type: number
              required:
                - permission_id
            examples:
              example1:
                value:
                  permission_id: 1
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission delete from the role
                    result: {}

        '400':
          description: Bad Request. Permission for this role is empty.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/role-permission/createMapping400Response'
  /scp/v1/role-permission-mapping/list:
    get:
      summary: Get list of role permissions
      tags:
        - Role Permission Mapping
      description: |-
        You can use this API to get a list of role permissions
         - The API Endpoint for getting a list of permissions is `/scp/v1/role-permission-mapping/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          required: true
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      results:
                        type: object
                        properties:
                          permissions:
                            type: array
                            items:
                              type: object
                              properties:
                                module:
                                  type: string
                                request_type:
                                  type: array
                                  items:
                                    type: string
                          count:
                            type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permissions list fetched successfully
                    result:
                      results:
                        permissions:
                          module: entity-type
                          request_type:
                            - POST,
                            - DELETE,
                            - GET,
                            - PUT,
                            - PATCH
                        count: 1
        '400':
          description: Bad Request. Permission for this role is empty
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/role-permission/createMapping400Response'

  /scp/v1/entity-types/create:
    post:
      summary: Create entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to create a user entity type  
         - The API Endpoint for creating a user entity is `/scp/v1/entity-types/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                label:
                  type: string
                type:
                  type: string
                allow_filtering:
                  type: boolean
                data_type:
                  type: string
                has_entities:
                  type: boolean
              required: []
            examples:
              example1:
                value:
                  value: ln
                  label: Languages
                  type: SYSTEM
                  allow_filtering: false
                  data_type: STRING
                  has_entities: true
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      allow_filtering:
                        type: boolean
                      data_type:
                        type: string
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      has_entities:
                        type: boolean
                  field_0:
                    type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type created successfully
                    result:
                      id: 1
                      value: ln
                      label: Languages
                      status: ACTIVE
                      allow_filtering: false
                      data_type: STRING
                      has_entities: true
                      created_by: 1
                      updated_by: 1
                      updated_at: '2023-09-22T12:40:19.817Z'
                      created_at: '2023-09-22T12:40:19.817Z'

        '400':
          description: Bad Request. Entity-Type already exists.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/createUserEntity400Response'
  /scp/v1/entity-types/update/{id}:
    post:
      summary: Update entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to update a user entity type
         - The API Endpoint for creating a user entity is `/scp/v1/entity-types/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                label:
                  type: string
                status:
                  type: string
                type:
                  type: string
                allow_filtering:
                  type: boolean
                data_type:
                  type: string
            examples:
              example1:
                value:
                  value: ln
                  label: Languages
                  status: ACTIVE
                  type: SYSTEM
                  allow_filtering: false
                  data_type: string
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      created_by:
                        type: 'null'
                      updated_by:
                        type: number
                      allow_filtering:
                        type: boolean
                      data_type:
                        type: string
                      organization_id:
                        type: number
                      has_entities:
                        type: boolean
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      deleted_at:
                        type: 'null'

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type updated successfully
                    result:
                      id: 1
                      value: ln
                      label: Languages
                      status: ACTIVE
                      created_by: 5
                      updated_by: 5
                      allow_filtering: false
                      data_type: string
                      organization_id: 1
                      has_entities: true
                      created_at: '2023-09-06T12:01:09.025Z'
                      updated_at: '2023-09-22T12:47:42.510Z'
                      deleted_at: null

        '400':
          description: Bad Request. Entity type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/updateUserEntity400Response'
  /scp/v1/entity-types/delete/{id}:
    delete:
      summary: Delete entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to delete a user entity  
         - The API Endpoint for creating a user entity is `/scp/v1/entity-types/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type deleted successfully
                    result: []

        '400':
          description: Bad Request. Entity-Type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/updateUserEntity400Response'
  /scp/v1/entity-types/read:
    post:
      summary: Read entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to read a entity type  
         - The API Endpoint for creating a user entity is `/scp/v1/entity-types/read` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: array
                  items:
                    type: string
            examples:
              example1:
                value:
                  value:
                    - ln
                  read_user_entity: false
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        value:
                          type: string
                        label:
                          type: string
                        status:
                          type: string
                        allow_filtering:
                          type: boolean
                        data_type:
                          type: string
                        created_at:
                          type: string
                        updated_at:
                          type: string
                        entities:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: number
                              entity_type_id:
                                type: number
                              value:
                                type: string
                              label:
                                type: string
                              status:
                                type: string
                              type:
                                type: string
                              created_at:
                                type: string
                              updated_at:
                                type: string
                        has_entities:
                          type: boolean
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type fetched successfully
                    result:
                      - id: 4
                        value: ln
                        label: Languages
                        status: ACTIVE
                        allow_filtering: false
                        data_type: STRING
                        has_entities: true
                        created_at: '2023-09-21T10:16:19.270Z'
                        updated_at: '2023-09-21T10:16:19.270Z'
                        entities:
                          - id: 13
                            entity_type_id: 4
                            value: ml
                            label: Malayalam
                            status: ACTIVE
                            type: SYSTEM
                            created_by: 1
                            updated_by: 1
                            created_at: '2023-09-21T10:16:33.583Z'
                            updated_at: '2023-09-21T10:16:33.583Z'
        '400':
          description: Bad Request. Entity-Type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'

  /scp/v1/entity/create:
    post:
      summary: Create entity
      tags:
        - Entity
      description: |-
        You can use this API to create a user entity  
         - The API Endpoint for creating a user entity is `/scp/v1/entity/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                label:
                  type: string
                entity_type_id:
                  type: number
            examples:
              example1:
                value:
                  value: en
                  label: English
                  entity_type_id: 4
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      entity_type_id:
                        type: number
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity created successfully
                    result:
                      id: 1
                      value: en
                      label: English
                      status: ACTIVE
                      type: SYSTEM
                      entity_type_id: 1
                      created_by: 0
                      updated_by: 0
                      updated_at: '2023-07-21T21:46:41.392Z'
                      created_at: '2023-07-21T21:46:41.392Z'
                      deleted_at: 'null'
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. User Entity already exists.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/createEntity400Response'
  /scp/v1/entity/update/{id}:
    put:
      summary: Update entity
      tags:
        - Entity
      description: |-
        Use this API to update a entity.   
         - The API Endpoint to update a user entity is `/scp/v1/entity/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token, which is available in
            the login API response.
          required: true
          schema:
            type: string
        - in: path
          name: 'id'
          description: Please append a valid user entity ID to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                label:
                  type: string
                status:
                  type: string
                entity_type_id:
                  type: number
            examples:
              example1:
                value:
                  value: english
                  label: English
                  status: ACTIVE
                  entity_type_id: 1
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      entity_type_id:
                        type: number
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity updated successfully
                    result:
                      id: 1
                      value: en
                      label: English
                      status: ACTIVE
                      type: SYSTEM
                      entity_type_id: 1
                      created_by: 0
                      updated_by: 0
                      updated_at: '2023-07-21T21:46:41.392Z'
                      created_at: '2023-07-21T21:46:41.392Z'
                      deleted_at: null
                    meta:
                      formsVersion: []

        '400':
          description: Bad Request. User Entity Not Found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'
  /scp/v1/entity/read/{id}:
    post:
      summary: Get entity details
      tags:
        - Entity
      description: |-
        Use this API to read the details of a user entity.   
         - The API Endpoint for reading the details of the user entity is `/scp/v1/entity/read` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token, which is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: ID of the entity
          schema:
            type: string
      responses:
        '200':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      entity_type_id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      deleted_at:
                        type: 'null'
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity fetched successfully
                    result:
                      - id: 1
                        entity_type_id: 1
                        value: english
                        label: English
                        status: ACTIVE
                        type: SYSTEM
                        created_by: 0
                        updated_by: 1
                        created_at: '2023-07-21T21:46:41.392Z'
                        updated_at: '2023-07-21T21:47:50.202Z'
                        deleted_at: null
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request. User Entity not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'

    parameters: []
  /scp/v1/entity/delete/{id}:
    delete:
      summary: Delete entity
      tags:
        - Entity
      description: |-
        You can use this API to delete a user entity.   
         - The API Endpoint for deleting a user entity is `/scp/v1/entity/delete` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: 'id'
          required: true
          description: Please append a valid user entity ID to the Request URL.
          schema:
            type: integer
          example: 2
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
                      meeting_platform:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity deleted successfully
                    result: []
                    meta:
                      formsVersion: []
                      correlation: 2f8b1d3d-0a25-4dda-ae5f-8d8bb9dd9282
                      meeting_platform: BBB
        '400':
          description: Bad Request. User Entity has already been deleted.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'

  /scp/v1/cloud-services/getSignedUrl:
    get:
      summary: Cloud services get signed url
      tags:
        - Cloud Services
      description: |-
        This API is associated with the cloud services for getting signed URL  
         - Then The API Endpoint forcloud services `/scp/v1/cloud-services/file/getSignedUrl` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                file_name:
                  type: string
                  description: Name of the file getting uploaded.
                  example: images.jpeg
                reference:
                  type: string
                  description: Reference value for the backend to identify the call.
                  example: certificate
                draft_id:
                  type: number
                  description: draft id
                  example: 123
              required:
                - file_name
                - reference
                - draft_id
            examples:
              example1:
                value:
                  file_name: images.jpeg
                  reference: certificate
                  draft_id: 123

      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      signed_url:
                        type: string
                      file_path:
                        type: string
                      dest_file_path:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Signed URL Generated Successfully.
                    result:
                      signed_url: >-
                        https://aws-bucket-storage-name.s3.ap-south-1.amazonaws.com/users/62832531a05cbd57b273aebb-1654149589875-laptop1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=aws-access-key-id%2F20220602%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20220602T055949Z&X-Amz-Expires=1800&X-Amz-Signature=0588b16fba45cb85efdc45749173c42ba26b47a9faa9bce5715c666b2657a4d4&X-Amz-SignedHeaders=host
                      file_path: users/62832531a05cbd57b273aebb-1654149589875-laptop1.jpg
                      dest_file_path: users/62832531a05cbd57b273aebb-1654149589875-laptop1.jpg
  /scp/v1/cloud-services/getDownloadableUrl?filePath={filePath}:
    get:
      summary: Cloud services get download url
      tags:
        - Cloud Services
      description: >-
        This API is associated with the cloud services for getting downloadable
        URL  
         - Then The API Endpoint forcloud services `/scp/v1/cloud-services/file/getDownloadableUrl` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: filePath
          required: true
          description: Please append a valid file path to url which has to be downloaded
          schema:
            type: string
          example: users/62832531a05cbd57b273aebb-1654149589875-image.jpg
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $ref: >-
                  #/components/schemas/cloud-services/cloudServicesDownloadResponse200

  /scp/v1/form/create:
    post:
      operationId: formCreate
      summary: Create form
      tags:
        - Form
      description: |-
        You can use this API to create a form  
         - The API Endpoint for creating a form is `/scp/v1/form/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: string
                sub_type:
                  type: string
                data:
                  type: object
                  properties:
                    template_name:
                      type: string
                    fields:
                      type: object
                      properties:
                        controls:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              label:
                                type: string
                              value:
                                type: string
                              class:
                                type: string
                              type:
                                type: string
                              position:
                                type: string
                              validators:
                                type: object
                                properties:
                                  required:
                                    type: boolean
                                  min_length:
                                    type: number
                              disabled:
                                type: boolean
                              show_select_all:
                                type: boolean
                            required:
                              - name
                              - label
                              - value
                              - class
                              - type
                              - position
                              - validators
                              - disabled
                              - show_select_all
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
                  data:
                    template_name: defaultTemplate
                    fields:
                      controls:
                        - name: title
                          label: title
                          value: ''
                          class: ion-margin
                          type: text
                          position: floating
                          validators:
                            required: true
                            min_length: 5
                        - name: categories
                          label: Select categories
                          value: ''
                          class: ion-margin
                          type: chip
                          position: ''
                          disabled: false
                          show_select_all: true
                          validators:
                            required: true

      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      type:
                        type: string
                      sub_type:
                        type: string
                      data:
                        type: object
                        properties:
                          template_name:
                            type: string
                          fields:
                            type: object
                            properties:
                              controls:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    label:
                                      type: string
                                    value:
                                      type: string
                                    class:
                                      type: string
                                    type:
                                      type: string
                                    position:
                                      type: string
                                    validators:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                        min_length:
                                          type: number
                                    disabled:
                                      type: boolean
                                    show_select_all:
                                      type: boolean
                                  required:
                                    - name
                                    - label
                                    - value
                                    - class
                                    - type
                                    - position
                                    - validators
                                    - disabled
                                    - show_select_all
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form created successfully
                    result:
                      id: 16
                      type: project
                      sub_type: createProject
                      data:
                        template_name: defaultTemplate
                        fields:
                          controls:
                            - name: title
                              label: title
                              value: ''
                              class: ion-margin
                              type: text
                              position: floating
                              validators:
                                required: true
                                min_length: 5
                            - name: categories
                              label: Select categories
                              value: ''
                              class: ion-margin
                              type: chip
                              position: ''
                              disabled: false
                              show_select_all: true
                              validators:
                                required: true

                      updated_at: '2023-07-18T20:48:10.492Z'
                      created_at: '2023-07-18T20:48:10.492Z'
                      deleted_at: null
                      organization_id: 1
                    meta:
                      formsVersion:
                        - id: 16
                          type: session

        '400':
          description: Bad Request. Form already exists
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/createForm400Response'
  /scp/v1/form/update/{formId}:
    put:
      operationId: formUpdate
      summary: Update form
      tags:
        - Form
      description: |-
        You can use this API to update a form.  
         - The API Endpoint for updating a form is `/scp/v1/form/update/{formId}` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: formId
          description: Please append a valid form Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: project
                sub_type:
                  type: createProject
                data:
                  type: object
                  properties:
                    template_name:
                      type: string
                    fields:
                      type: object
                      properties:
                        controls:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              label:
                                type: string
                              value:
                                type: string
                              class:
                                type: string
                              type:
                                type: string
                              position:
                                type: string
                              validators:
                                type: object
                                properties:
                                  required:
                                    type: boolean
                                  min_length:
                                    type: number
                              disabled:
                                type: boolean
                              show_select_all:
                                type: boolean
                            required:
                              - name
                              - label
                              - value
                              - class
                              - type
                              - position
                              - validators
                              - disabled
                              - show_select_all
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
                  data:
                    template_name: Test
                    fields:
                      controls:
                        - name: title
                          label: title
                          value: ''
                          class: ion-margin
                          type: text
                          position: floating
                          validators:
                            required: true
                            min_length: 5
                        - name: categories
                          label: Select categories
                          value: ''
                          class: ion-margin
                          type: chip
                          position: ''
                          disabled: false
                          show_select_all: true
                          validators:
                            required: true

      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form updated successfully
                    result: []
                    meta:
                      formsVersion:
                        - id: 16
                          type: project

        '400':
          description: Bad Request. Form not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/updateForm400Response'
  /scp/v1/form/read/{formId}:
    post:
      operationId: formRead
      summary: Get form data
      tags:
        - Form
      description: |-
        You can use this API to read data from a form.  
         - The API Endpoint to read form data is `/scp/v1/form/read/{formID}` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: formId
          description: Please append a valid form Id to the Request URL.
          schema:
            type: number
          required: false
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: string
                sub_type:
                  type: string
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      type:
                        type: string
                      sub_type:
                        type: string
                      data:
                        type: object
                        properties:
                          template_name:
                            type: string
                          fields:
                            type: object
                            properties:
                              controls:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    label:
                                      type: string
                                    value:
                                      type: string
                                    class:
                                      type: string
                                    type:
                                      type: string
                                    position:
                                      type: string
                                    validators:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                        min_length:
                                          type: number
                                    disabled:
                                      type: boolean
                                    show_select_all:
                                      type: boolean
                                  required:
                                    - name
                                    - label
                                    - value
                                    - class
                                    - type
                                    - position
                                    - validators
                                    - disabled
                                    - show_select_all
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                      correlation:
                        type: string
                      meeting_platform:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form fetched successfully
                    result:
                      id: 16
                      type: project
                      sub_type: createProject
                      data:
                        template_name: defaultTemplate
                        fields:
                          controls:
                            - name: title
                              label: title
                              value: ''
                              class: ion-margin
                              type: text
                              position: floating
                              validators:
                                required: true
                                min_length: 5
                            - name: categories
                              label: Select categories
                              value: ''
                              class: ion-margin
                              type: chip
                              position: ''
                              disabled: false
                              show_select_all: true
                              validators:
                                required: true
                      updated_at: '2023-07-18T20:48:10.492Z'
                      created_at: '2023-07-18T20:48:10.492Z'
                      deleted_at: null
                      organization_id: 1
                    meta:
                      formsVersion:
                        - id: 16
                          type: project

        '400':
          description: Bad Request.Form not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/updateForm400Response'

  /scp/v1/projects/update:
    post:
      summary: Create Project
      tags:
        - Projects
      description: |-
        You can use this API to create a project 
         - The API Endpoint for creating a project is `/scp/v1/project/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                categories:
                  type: array
                  items:
                    type: string
                recommented_duration:
                  type: object
                  properties:
                    type:
                      type: string
                    number:
                      type: number
                keywords:
                  type: string
                recommeneded_for:
                  type: array
                  items:
                    type: string
                languages:
                  type: array
                  items:
                    type: string
                learning_resources:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      url:
                        type: string
                solution_details:
                  type: object

                licence:
                  type: string
                task:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      type:
                        type: string
                      children:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                      is_mandatory:
                        type: boolean
                      allow_evidences:
                        type: boolean
                      evidence_details:
                        type: object
                        properties:
                          file_types:
                            type: array
                            items:
                              type: string
                          min_no_of_evidences:
                            type: string
                      sequence_no:
                        type: number
                certificate:
                  type: object
                  properties:
                    base_template_id:
                      type: number
                    issuer:
                      type: string
                    logos:
                      type: array
                      items:
                        type: string
                    signatures:
                      type: array
                      items:
                        type: string
                    criteria:
                      type: object
                      properties:
                        expressions:
                          type: string
                        conditions:
                          type: object
                          properties:
                            C1:
                              type: object
                              properties:
                                validation_text:
                                  type: string
                                expression:
                                  type: string
                                conditions:
                                  type: object
                                  properties:
                                    C1:
                                      type: object
                                      properties:
                                        scope:
                                          type: string
                                        key:
                                          type: string
                                        function:
                                          type: string
                                        filter:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                            value:
                                              type: string
                                            operator:
                                              type: string
                                            value1:
                                              type: string

            examples:
              project with child tasks:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                      children:
                        - id: 0a8b13fb-c9e1-4296-8abd-8b64b357a128
                          name: child task 1
                          type: content
                          is_mandatory: true
                          allow_evidences: true
                          parent_id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                          sequence_no: 1

                  certificate: {}
              project without child tasks and certificates:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                  certificate: {}
              project with task observation with certificate:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 3a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task observation'
                      type: observation
                      is_mandatory: true
                      allow_evidences: true
                      children: []
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                      solution_details:
                        id: 3
                        name: sample observation
                        min_no_of_submissions_required: 2
                        type: observation
                  certificate:
                    base_template_id: 5
                    logos:
                      - https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                    signatures:
                      - https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                    issuer: SPD
                    criteria:
                      expressions: C1&&C2
                      conditions:
                        C1:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: project
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                        C2:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: task
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                              task_details:
                                - 7a8b13fb-c9e1-4296-8abd-8b64b357a128

      responses:
        '201':
          description: Project created successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project created successfully
                    result:
                      id: 1
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. Project creation failed.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/createProject400Response'
  /scp/v1/projects/update/{id}:
    post:
      summary: Update Project
      tags:
        - Projects
      description: |-
        You can use this API to update a project 
         - The API Endpoint for update a project is `/scp/v1/project/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                categories:
                  type: array
                  items:
                    type: string
                recommented_duration:
                  type: object
                  properties:
                    type:
                      type: string
                    number:
                      type: number
                keywords:
                  type: string
                recommeneded_for:
                  type: array
                  items:
                    type: string
                languages:
                  type: array
                  items:
                    type: string
                learning_resources:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      url:
                        type: string
                solution_details:
                  type: object

                licence:
                  type: string
                task:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      type:
                        type: string
                      children:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                      is_mandatory:
                        type: boolean
                      allow_evidences:
                        type: boolean
                      evidence_details:
                        type: object
                        properties:
                          file_types:
                            type: array
                            items:
                              type: string
                          min_no_of_evidences:
                            type: string
                      sequence_no:
                        type: number
                certificate:
                  type: object
                  properties:
                    base_template_id:
                      type: number
                    issuer:
                      type: string
                    logos:
                      type: array
                      items:
                        type: string
                    signatures:
                      type: array
                      items:
                        type: string
                    criteria:
                      type: object
                      properties:
                        expressions:
                          type: string
                        conditions:
                          type: object
                          properties:
                            C1:
                              type: object
                              properties:
                                validation_text:
                                  type: string
                                expression:
                                  type: string
                                conditions:
                                  type: object
                                  properties:
                                    C1:
                                      type: object
                                      properties:
                                        scope:
                                          type: string
                                        key:
                                          type: string
                                        function:
                                          type: string
                                        filter:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                            value:
                                              type: string
                                            operator:
                                              type: string
                                            value1:
                                              type: string

            examples:
              project with child tasks:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                      children:
                        - id: 0a8b13fb-c9e1-4296-8abd-8b64b357a128
                          name: child task 1
                          type: content
                          is_mandatory: true
                          allow_evidences: true
                          parent_id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                          sequence_no: 1

                  certificate: {}
              project without child tasks and certificates:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                  certificate: {}
              project with task observation with certificate:
                value:
                  title: Sample Project
                  categories:
                    - communication
                  recommented_duration:
                    type: week
                    number: 5
                  keywords: test
                  recommeneded_for:
                    - HM
                  languages:
                    - en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 3a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task observation'
                      type: observation
                      is_mandatory: true
                      allow_evidences: true
                      children: []
                      evidence_details:
                        file_types:
                          - mp4
                        min_no_of_evidences: 5
                      sequence_no: 1
                      solution_details:
                        id: 3
                        name: sample observation
                        min_no_of_submissions_required: 2
                        type: observation
                  certificate:
                    base_template_id: 5
                    logos:
                      - https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                    signatures:
                      - https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                    issuer: SPD
                    criteria:
                      expressions: C1&&C2
                      conditions:
                        C1:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: project
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                        C2:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: task
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                              task_details:
                                - 7a8b13fb-c9e1-4296-8abd-8b64b357a128

      responses:
        '201':
          description: Project updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project updated successfully
                    result:
                      id: 1
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. Project Update Failed.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/createProject400Response'
  /scp/v1/projects/update/{projectId}:
    delete:
      summary: Delete Project
      tags:
        - Projects
      description: |-
        You can use this API to create a project 
         - The API Endpoint for creating a user entity is `/scp/v1/project/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '201':
          description: Project deleted successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project deleted successfully

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. Project not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'
  /scp/v1/projects/submitForReview/{projectId}:
    post:
      summary: Submit for review
      tags:
        - Projects
      description: |-
        You can use this API to submit the project for review
         - The API Endpoint for creating a user entity is `/scp/v1/project/submitForReview` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                status:
                  type: string
                reviwer_ids:
                  type: array
                  items:
                    type: string
            examples:
              example1:
                value:
                  status: SUBMITTED
                  reviwer_ids: [23, 25]

      responses:
        '201':
          description: Project submitted for review successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project submitted for review successfully
                    result: {}

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'
  /scp/v1/projects/list?page={page}&limit={limit}&search={search}:
    post:
      summary: Project list
      tags:
        - Projects
      description: |-
        You can use this API to list projects
         - The API Endpoint for listing project is `/scp/v1/project/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                status:
                  type: string
                sort:
                  type: object
                  items:
                    type: string
            examples:
              sort with asc or desc:
                value:
                  status: DRAFT
                  sort:
                    key: title
                    direction: asc/desc
              sort with status:
                value:
                  sort:
                    key: status
                    value: INPROGRESS

      responses:
        '201':
          description: project listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                      count:
                        type: number

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project listed successfully
                    result:
                      data:
                        - id: 4
                          title: sample project
                          type: project
                          organization:
                            id: 24
                            name: Shikshalokam
                            code: sl
                          status: DRAFT
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projecsuccessfullytCreation
                          version: 3
  /scp/v1/projects/details/{projectId}:
    post:
      summary: Project Details
      tags:
        - Projects
      description: |-
        You can use this API to get project details
         - The API Endpoint for get project details is `/scp/v1/project/details` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '201':
          description: Project fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      title:
                        type: string
                      categories:
                        type: array
                        items:
                          type: string
                      recommented_duration:
                        type: object
                        properties:
                          type:
                            type: string
                          number:
                            type: number
                      keywords:
                        type: string
                      recommeneded_for:
                        type: array
                        items:
                          type: string
                      languages:
                        type: array
                        items:
                          type: string
                      learning_resources:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            url:
                              type: string
                      solution_details:
                        type: object

                      licence:
                        type: string
                      task:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            type:
                              type: string
                            children:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                            is_mandatory:
                              type: boolean
                            allow_evidences:
                              type: boolean
                            evidence_details:
                              type: object
                              properties:
                                file_types:
                                  type: array
                                  items:
                                    type: string
                                min_no_of_evidences:
                                  type: string
                            sequence_no:
                              type: number
                      certificate:
                        type: object
                        properties:
                          base_template_id:
                            type: number
                          issuer:
                            type: string
                          logos:
                            type: array
                            items:
                              type: string
                          signatures:
                            type: array
                            items:
                              type: string
                          criteria:
                            type: object
                            properties:
                              expressions:
                                type: string
                              conditions:
                                type: object
                                properties:
                                  C1:
                                    type: object
                                    properties:
                                      validation_text:
                                        type: string
                                      expression:
                                        type: string
                                      conditions:
                                        type: object
                                        properties:
                                          C1:
                                            type: object
                                            properties:
                                              scope:
                                                type: string
                                              key:
                                                type: string
                                              function:
                                                type: string
                                              filter:
                                                type: object
                                                properties:
                                                  key:
                                                    type: string
                                                  value:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  value1:
                                                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project fetched successfully
                    result:
                      status: IN_REVIEW
                      organization:
                        id: 2
                        name: Shikshlokam
                        code: SL
                      organization_id: 2
                      reviwers:
                        id: 24
                        name: Raven
                        status: REQUEST_FOR_CHANGES
                      title: Sample Project
                      categories:
                        - label: communication
                          value: communication
                      recommented_duration:
                        type: week
                        number: 5
                      keywords: test
                      recommeneded_for:
                        - label: HM
                          value: hm
                      languages:
                        - en
                      learning_resources:
                        - name: sample doc
                          url: 'http://test.com'
                      licence: CC BY 4.0
                      tasks:
                        - id: 3a8b13fb-c9e1-4296-8abd-8b64b357a128
                          name: 'task observation'
                          type: observation
                          is_mandatory: true
                          allow_evidences: true
                          children: []
                          evidence_details:
                            file_types:
                              - mp4
                            min_no_of_evidences: 5
                          sequence_no: 1
                          solution_details:
                            id: 3
                            name: sample observation
                            min_no_of_submissions_required: 2
                            type: observation
                      certificate:
                        base_template_id: 5
                        logos:
                          - https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                        signatures:
                          - https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                        issuer: SPD
                        criteria:
                          expressions: C1&&C2
                          conditions:
                            C1:
                              validation_text: minimum no of evidences at project level
                              expression: C1
                              conditions:
                                C1:
                                  scope: project
                                  key: evidence
                                  function: count
                                  filter:
                                    key: type
                                    value: all
                                  operator: '>='
                                  value: 4
                            C2:
                              validation_text: minimum no of evidences at project level
                              expression: C1
                              conditions:
                                C1:
                                  scope: task
                                  key: evidence
                                  function: count
                                  filter:
                                    key: type
                                    value: all
                                  operator: '>='
                                  value: 4
                                  task_details:
                                    - 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      comments:
                        - id: 2
                          comment: correct spelling
                          context: page
                          page: 1
                          status: UNRESOLVED
                          parent_id: 0
                          user_id: 24
                          user:
                            id: 24
                            name: Priyanka

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'
  /scp/v1/projects/reviwerList:
    get:
      summary: Reviewer List
      tags:
        - Projects
      description: |-
        You can use this API to get the list all project reviwers
         - The API Endpoint for comment list is `/scp/v1/projects/reviwerList` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resource_id
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '201':
          description: Reviewer list fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      resource_id:
                        type: string
                      comments:
                        type: array
                        items:
                          type: object
                      count:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Reviewer list fetched successfully
                    result:
                      data:
                        - id: 1
                          name: Priyanka
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                        - id: 2
                          name: Adithya
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                        - id: 3
                          name: Ankit
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                      count: 3
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/projects/publish/{projectId}:
    get:
      summary: Project Publish
      tags:
        - Projects
      description: |-
        You can use this API to publish the project
         - The API Endpoint for publish project is `/scp/v1/projects/publish` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '201':
          description: project published successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project published successfully
                    result:
                      id: 3
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'

  /scp/v1/review/update/{projectId}:
    post:
      summary: Review Update
      tags:
        - Review
      description: |-
        You can use this API to update review status
         - The API Endpoint for listing project is `/scp/v1/review/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                status:
                  type: string

            examples:
              sort with asc or desc:
                value:
                  status: REQUEST_FOR_CHANGES
                  type: project
      responses:
        '201':
          description: project review updated
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project review updated successfully
                    result: {}
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /scp/v1/comment/update/{id}:
    post:
      summary: Add or Update Comment
      tags:
        - Comment
      description: |-
        You can use this API to create or update comment
         - The API Endpoint for add or update is `/scp/v1/comment/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid comment Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                resource_id:
                  type: string
                type:
                  type: object
                comments:
                  type: object
                  properties:
                    comment:
                      type: string
                    context:
                      type: string
                    page:
                      type: string
                    status:
                      type: string
                    parent_id:
                      type: string

            examples:
              example1:
                value:
                  resource_id: 1
                  comments:
                    comment: 'Check spelling'
                    context: page
                    page: 1
                    status: UNRESOLVED
                    parent_id: 2

      responses:
        '201':
          description: Comment updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comment updated successfully
                    result:
                      id: 3
                      resource_id: 1
                      comments:
                        comment: 'Check spelling'
                        context: page
                        page: 1
                        status: UNRESOLVED
                        parent_id: 2
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request. Resource not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/comment/updateComment400Response'

  /scp/v1/comment/list?resource_id={resource_id}:
    get:
      summary: Comment List
      tags:
        - Comment
      description: |-
        You can use this API to get the list all comments
         - The API Endpoint for comment list is `/scp/v1/comment/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resource_id
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '201':
          description: Comment fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      resource_id:
                        type: string
                      comments:
                        type: array
                        items:
                          type: object
                      count:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comment updated successfully
                    result:
                      resource_id: 1
                      comments:
                        - comment: 'Check spelling'
                          context: page
                          page: 1
                          status: UNRESOLVED
                          parent_id: 2
                      count: 1
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /scp/v1/organization-extension/createConfig:
    post:
      summary: Create the organization configurations
      tags:
        - Organization
      description: |-
        You can use this API to create organization configurations, for example change the minimum number of approvals for the resource.
         - The API Endpoint for add organization configurations is `/scp/v1/organization-extension/createConfig` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                show_reviewer_list:
                  type: boolean
                min_approval:
                  type: string
                resource_type:
                  type: string

            examples:
              example1:
                value:
                  show_reviewer_list: true
                  min_approval: 2
                  resource_type: project

      responses:
        '201':
          description: Config added successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      org_id:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config added successfully
                    result:
                      org_id: 3
                      show_reviewer_list: true
                      min_approval: 2
                      resource_type: project

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/organization/createConfig400Response'
  /scp/v1/organization-extension/updateConfig?resource_type={resource_type}:
    post:
      summary: Update the organization configurations
      tags:
        - Organization
      description: |-
        You can use this API to update organization configurations, for example change the minimum number of approvals for the resource.
         - The API Endpoint for update organization configurations is `/scp/v1/organization-extension/updateConfig` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resource_type
          description: Please append a valid resource type to the Request URL.
          schema:
            type: string
          required: true
          example: project
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                show_reviewer_list:
                  type: boolean
                min_approval:
                  type: string
                resource_type:
                  type: string

            examples:
              example1:
                value:
                  show_reviewer_list: true
                  min_approval: 2
                  resource_type: project

      responses:
        '201':
          description: Config updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      org_id:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config updated successfully
                    result:
                      org_id: 3
                      show_reviewer_list: true
                      min_approval: 2
                      resource_type: project

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/organization/updateConfig400Response'
  /scp/v1/organization-extension/listConfig:
    get:
      summary: List the organization configurations
      tags:
        - Organization
      description: |-
        You can use this API to list organization configurations
         - The API Endpoint for list all organization configurations is `/scp/v1/organization-extension/listConfig` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      responses:
        '201':
          description: Config fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            org_id:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config fetched successfully
                    result:
                      data:
                        - org_id: 3
                          show_reviewer_list: true
                          min_approval: 2
                          resource_type: project
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/organization/updateConfig400Response'

  /scp/v1/certificate/update:
    post:
      summary: Create certificate base template
      tags:
        - Certificate
      description: |-
        You can use this API to create certificate base template 
         - The API Endpoint for create certificate base template  is `/scp/v1/certificate/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: boolean
                name:
                  type: string
                url:
                  type: string
                meta:
                  type: object
                resource_type:
                  type: string

            examples:
              example1:
                value:
                  code: one-logo-one-sign
                  name: One Logo One Signature
                  resource_type: project
                  url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBaseTemplates/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                  meta:
                    no_of_logos: 1
                    no_of_signature: 1

      responses:
        '201':
          description: Template created successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template created successfully
                    result:
                      id: 2
                      code: one-logo-one-sign
                      name: One Logo One Signature
                      resource_type: project
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBaseTemplates/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                      meta:
                        no_of_logs: 1
                        no_of_signature: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/certificate/createCertificate400Response'
  /scp/v1/certificate/update/{id}:
    post:
      summary: Update certificate base template
      tags:
        - Certificate
      description: |-
        You can use this API to update certificate base template 
         - The API Endpoint for update certificate base template  is `/scp/v1/certificate/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid certificate id to the Request URL.
          schema:
            type: string
          required: true
          example: 3

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                name:
                  type: string

            examples:
              example1:
                value:
                  name: One Logo One Signature

      responses:
        '201':
          description: Template updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template updated successfully
                    result:
                      id: 2
                      code: one-logo-one-sign
                      name: One Logo One Signature
                      resource_type: project
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBaseTemplates/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                      meta:
                        no_of_logs: 1
                        no_of_signature: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/certificate/updateCertificate400Response'
  /scp/v1/certificate/createSVG:
    post:
      summary: Edit Certificate SVG
      tags:
        - Certificate
      description: |-
        You can use this API to edit certificate svg 
         - The API Endpoint for edit certificate svg is `/scp/v1/certificate/createSVG` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                state_logo1:
                  type: boolean
                state_title:
                  type: string
                signature_img1:
                  type: string
                signature_title_name1:
                  type: string
                signature_title_designation1:
                  type: string

            examples:
              example1:
                value:
                  state_logo1: /user/state.png
                  state_title: Karnataka
                  signature_img1: /user/sign.png
                  signature_title_name1: Director
                  signature_title_designation1: SPD

      responses:
        '201':
          description: Template edited successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template edited successfully
                    result:
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBaseTemplates/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/certificate/list?resource_type={resource_type}&page={page}&limit={limit}&search={search}:
    get:
      summary: List Certificate Templates
      tags:
        - Certificate
      description: |-
        You can use this API to list certificate templates
         - The API Endpoint for list certificate templates is `/scp/v1/certificate/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resource_type
          description: Please add the resource type
          schema:
            type: string
          example: project
        - in: path
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: path
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 2
        - in: path
          name: search
          description: Please search for information such as names
          schema:
            type: string
          example: one logo

      responses:
        '201':
          description: Certificate template listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Certificate template listed successfully
                    result:
                      data:
                        - id: 2
                          code: one-logo-one-sign
                          name: One Logo One Signature
                          resource_type: project
                          url: https://storage.googleapis.com/scp-dev-storage-private/certificateTemplates/6343bd978f9d8980b7841e85/ba9aa220-ff1b-4717-b6ea-ace55f04fc16_2022-9-10-1665383945769.svg
                          meta:
                            no_of_logs: 1
                            no_of_signature: 1
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /user/v1/userRole/create:
    post:
      summary: Create User Roles
      tags:
        - User Service APIS
      description: |
        Use this API to create an user Role.

        - Endpoint: `/user/v1/userRole/create`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                  description: Title of the user role.
                user_type:
                  type: number
                  description: The type of user. Expected values - 0 for SYSTEM roles, 1 for other roles (default).
                status:
                  type: string
                  description: status of the user role.  `ACTIVE` (default)
                visibility:
                  type: string
                  description: Visibility of the user role. `PUBLIC` (default)
              required:
                - title
                - user_type
                - status
            examples:
              example1:
                value:
                  title: CONTENT_CREATOR
                  user_type: 1
                  status: ACTIVE
                  visibility: PUBLIC
      responses:
        '201':
          description: OK. Roles created successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      title:
                        type: string
                      user_type:
                        type: number
                      status:
                        type: string
                      visibility:
                        type: string
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Roles created successfully
                    result:
                      title: CONTENT_CREATOR
                      user_type: 1
                      status: ACTIVE
                      visibility: PUBLIC
                      organization_id: 3
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/createRole400Response'
  /user/v1/userRole/update/{id}:
    post:
      summary: Update User Roles
      tags:
        - User Service APIS
      description: |
        Use this API to update an user Role.

        - Endpoint: `/user/v1/userRole/update/{id}`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid role id to the Request URL.
          schema:
            type: string
          required: true
          example: 3
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                user_type:
                  type: number
                status:
                  type: string
                visibility:
                  type: string
              required:
                - title
                - user_type
                - status
                - visibility
            examples:
              example1:
                value:
                  title: CONTENT_CREATOR
                  user_type: 1
                  status: ACTIVE
                  visibility: PUBLIC
      responses:
        '201':
          description: OK. Roles updated successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      title:
                        type: string
                      user_type:
                        type: number
                      status:
                        type: string
                      visibility:
                        type: string
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Roles updated successfully
                    result:
                      title: CONTENT_CREATOR
                      user_type: 1
                      status: ACTIVE
                      visibility: PUBLIC
                      organization_id: 3
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/updateRole400Response'
  /user/v1/org-admin/updateUser/{id}:
    post:
      summary: Update User Roles
      tags:
        - User Service APIS
      description: |
        Use this API to update an user.

        - Endpoint: `/user/v1/org-admin/updateUser/{id}`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid role id to the Request URL.
          schema:
            type: string
          required: true
          example: 3
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                name:
                  type: string
                roles:
                  type: number
                org_id:
                  type: string
              required:
                - title
                - user_type
                - status
                - visibility
            examples:
              example1:
                value:
                  name: Priyanka
                  roles: [CONTENT_CREATOR]
                  org_id: 1
      responses:
        '201':
          description: OK. User updated successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: User updated successfully
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/updateUser400Response'
  /scp/v1/config/get:
    get:
      description: ''
      operationId: /scp/v1/platform/config
      tags:
        - Config APIs
      parameters: []
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      report_issue:
                        type: object
                        properties:
                          to:
                            type: string
                          subject:
                            type: string
                  meta:
                    type: object
                    properties:
                      forms_version:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                      correlation:
                        type: string
              examples:
                Success  Response:
                  value:
                    responseCode: OK
                    message: App config fetched successfully
                    result:
                      report_issue:
                        to: support@xyz.com,team@xyz.com
                        subject: Support request for SCP
                    meta:
                      forms_version:
                        - id: 55
                          type: projects
                      correlation: a677494a-b89c-441c-8bdf-70fc91c7136d
                example1:
                  value:
                    responseCode: OK
                    message: App config fetched successfully
                    result:
                      report_issue:
                        to: support@xyz.com,team@xyz.com
                        subject: Support request for SCP
                    meta:
                      forms_version:
                        - id: 55
                          type: session
                      correlation: a677494a-b89c-441c-8bdf-70fc91c7136d
      summary: Get app config
components:
  schemas:
    module:
      updateModule400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: module not found
          error:
            type: array
            items:
              type: string
            example: []
      getModuleList400Response:
        type: object
        description: Module not found.
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Module not found.
          result:
            type: object
            properties:
              data:
                type: array
              count:
                type: integer
                example: 0
          error:
            type: array
            items:
              type: string
            example: []

    permissions:
      updatePermission400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: permission not found
          error:
            type: array
            items:
              type: string
            example: []

    role-permission:
      createMapping400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Permission for this role is empty
          error:
            type: array
            items:
              type: string
            example: []

    entity-type:
      createUserEntity400Response:
        type: object
        description: entity type already exist
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity type already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateUserEntity400Response:
        type: object
        description: Entity type not found
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity type not found
          error:
            type: array
            items:
              type: string
            example: []

    entity:
      createEntity400Response:
        type: object
        description: entity already exist
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateUserEntity400Response:
        type: object
        description: Entity not found
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity not found
          error:
            type: array
            items:
              type: string
            example: []

    cloud-services:
      cloudServicesDownloadResponse200:
        type: object
        properties:
          responseCode:
            type: string
            example: OK
          message:
            type: string
            example: Download URL Generated Successfully.
          result:
            type: string
            example: >-
              https://aws-bucket-storage-name.s3.ap-south-1.amazonaws.com/users/62832531a05cbd57b273aebb-1654149589875-image.jpg

    form:
      createForm400Response:
        description: Bad Request. Form Already Exist
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Form already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateForm400Response:
        description: Bad Request. Form not found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Form not found
          error:
            type: array
            items:
              type: string
            example: []

    project:
      createProject400Response:
        type: object
        description: project creation error.
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          error:
            type: array
            items:
              type: string
            example:
              - location: body
                param: title
                msg: title is invalid
              - location: body
                param: categiries
                msg: categiries required
      deleteProject400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: project not found
          error:
            type: array
            items:
              type: string
            example: []

    organization:
      createConfig400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Configuration already exist
          error:
            type: array
            items:
              type: string
            example: []

      updateConfig400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Configuration not found
          error:
            type: array
            items:
              type: string
            example: []

    comment:
      updateComment400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Comment not found
          error:
            type: array
            items:
              type: string
            example: []

    certificate:
      createCertificate400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: template already exist
          error:
            type: array
            items:
              type: string
            example: []
      updateCertificate400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Template not found
          error:
            type: array
            items:
              type: string
            example: []

    user:
      createRole400Response:
        description: Bad Request. Role Already Exist
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User Role already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateRole400Response:
        description: Bad Request. Role Not Found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User Role not found
          error:
            type: array
            items:
              type: string
            example: []
      updateUser400Response:
        description: Bad Request. User Not Found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User not found
          error:
            type: array
            items:
              type: string
            example: []

    config:
      $schema: http://json-schema.org/draft-04/schema#
      type: object
      properties:
        responseCode:
          type: string
        message:
          type: string
        result:
          type: object
          properties:
            meeting_platform:
              type: string
            reportIssue:
              type: object
              properties:
                to:
                  type: string
                subject:
                  type: string
        meta:
          type: object
          properties:
            formsVersion:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  type:
                    type: string
            correlation:
              type: string
    schema-1:
      type: object
      properties: {}
  securitySchemes:
    bearer:
      type: apiKey
      name: X-auth-token
      in: header
  /scp/v1/comment/list:
    get:
      summary: List all comments based on resource id.
      tags:
        - Comments APIs
      description: >-
        You can use this API to get the list of all comments based on resource id.
        - The API Endpoint for getting a list of permissions is `/scp/v1/comment/list` 
        - It is mandatory to provide values for parameters marked with `required` 
        - Mandatory parameter cannot be empty or null
      parameters:
        - name: X-auth-token
          required: true
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          schema:
            type: string
        - in: path
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: path
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 2
        - in: path
          name: resource_id
          description: Pass the resource_id to get all the comments for the particular resource.
          schema:
            type: number
          required: true
          example: 2603

      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                responseCode:
                  type: string
                message:
                  type: string
                result:
                  type: object
                  properties:
                    resource_id:
                      type: number
                    comments:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: number
                          comment:
                            type: string
                          context:
                            type: string
                          page:
                            type: number
                          status:
                            type: string
                          author:
                            type: object
                            properties:
                              id:
                                type: number
                              name:
                                type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comments fetched successfully.
                    result:
                      resource_id: 2603
                      comments:
                        - id: 1234
                          comment: 'This is a comment'
                          context: 'page'
                          page: 1
                          status: 'UNRESOLVED'
                          author:
                            id: 123
                            name: 'Priyanka'
                        - id: 5678
                          comment: 'This is a reply comment'
                          context: 'page'
                          parent_id: 1234
                          page: 1
                          status: 'UNRESOLVED'
                          author:
                            id: 412
                            name: 'Adithya Dinesh'
                    meta:
                      formsVersion: []
                      correlation: a761e205-7d3a-4f6c-a31a-4641a14f1e91

  /scp/v1/comment/update:
    post:
      summary: Add or Update comments to resources.
      tags:
        - Comments APIs
      description: |-
        This Api is associated with adding new comments or updating the existing comments.
        - The Endpoint for creating and updating remains the same.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                resource_id:
                  type: number
                comments:
                  type: array
                  items:
                    type: object
                    properties:
                      comment:
                        type: string
                      context:
                        type: string
                      page:
                        type: number
                      status:
                        type: string
                      parent_id:
                        type: number
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      resource_id:
                        type: number

                      comments:
                        type: array
                        items:
                          type: object
                          properties:
                            comment:
                              type: string
                            context:
                              type: string
                            page:
                              type: number
                            status:
                              type: string
                            parent_id:
                              type: number

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comment updated successfully.
                    result: []
                    meta:
                      formsVersion: []
                      correlation: a761e205-7d3a-4f6c-a31a-4641a14f1e91
        '400':
          description: Bad Request. Resource not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/comment/updateComment400Response'
