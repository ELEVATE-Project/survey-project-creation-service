openapi: 3.0.0
info:
  title: Elevate Survey Project Creation Portal Service
  version: 1.0.0
  description: >-
    - The Survey Project Creation Portal Service is a centralized service that supports designing of resources.

    - The URL to access the Creation Portal API(s) is `{context}/scp/v1` -
    <b>Note:</b> These resources can be used in other services.
  contact:
    email: tech-infra@shikshalokam.org
servers:
  - url: http://localhost:3006
    description: local server. NB :- port may vary according to the local setup.
  - url: https://dev.elevate-apis.shikshalokam.org/
    description: dev server

paths:
  /scp/v1/modules/create:
    post:
      summary: Creating new modules
      tags:
        - Modules
      description: |-
        This API is associated with modules
         - Endpoint for creating modules  `/scp/v1/modules/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      Id:
                        type: number
                      code:
                        type: string
                      status:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module created successfully
                    result:
                      id: 6
                      code: project
                      status: ACTIVE
        '400':
          description: Bad request. module already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    meta:
                      correlation: 32016da1-8bf1-4157-afad-34508aa609c8
                    message: module already exists
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: Unique code for modules.
              required:
                - code
            examples:
              example1:
                value:
                  code: project
    parameters: []
  /scp/v1/modules/update/{id}:
    post:
      summary: Update modules by id
      tags:
        - Modules
      description: |-
        You can use this API to update modules by id
         - The API Endpoint for updating modules `/scp/v1/modules/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            Module id
          required: true
          example: 6
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: Unique code for modules.
              required:
                - code
            examples:
              example1:
                value:
                  code: project
                  status: INACTIVE
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      code:
                        type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module updated successfully
                    result:
                      id: 6
                      code: project
                      status: INACTIVE
                    meta:
                      correlation: dea5b252-75d2-40ed-a5a7-f8dec087467e
        '400':
          description: Bad Request. Module not Found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/updateModule400Response'
  /scp/v1/modules/list:
    get:
      summary: Get list of modules
      tags:
        - Modules
      description: |-
        You can use this API to get a list of modules
         - The API Endpoint for getting a list of modules is `/scp/v1/modules/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          required: true
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          schema:
            type: string
        - in: query
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: query
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 2
        - in: query
          name: search
          description: Please search for information such as 'code'.
          schema:
            type: string
          example: project
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            code:
                              type: string
                            status:
                              type: string
                          required:
                            - id
                            - code
                            - status
                      count:
                        type: number
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module fetched successfully
                    result:
                      data:
                        - id: 6
                          code: project
                          status: ACTIVE
                        - id: 2
                          code: observation
                          status: ACTIVE
                        - id: 4
                          code: program
                          status: ACTIVE
                        - id: 5
                          code: system
                          status: ACTIVE
                      count: 4
                    meta:
                      correlation: 4cbb42f7-ed92-41a1-b93d-d689121cda08
        '400':
          description: Bad Request. Module Not Found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/getModuleList400Response'
  /scp/v1/modules/delete/{id}:
    delete:
      summary: Delete modules by id
      tags:
        - Modules
      description: |-
        You can use this API to delete module
         - The API Endpoint for deleting module is `/scp/v1/modules/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Module id
          required: true
          example: 6
          schema:
            type: string
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Module deleted successfully
                    result: {}
                    meta:
                      correlation: 471d834a-4954-4564-ae91-6a1f24bec1e5
        '400':
          description: Bad Request. Module not found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/module/updateModule400Response'

  /scp/v1/permissions/create:
    post:
      summary: Creating new permission
      tags:
        - Permissions
      description: |-
        This API is associated with permissions
         - Endpoint for creating permission  `/scp/v1/permissions/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: string
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission created successfully
                    result:
                      id: 18
                      code: create_project
                      module: project
                      request_type:
                        - POST
                      api_path: /scp/v1/project/create
                      status: ACTIVE
        '400':
          description: Bad request. Permission already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    meta:
                      correlation: 32016da1-8bf1-4157-afad-34508aa609c8
                    message: permission already exists
      requestBody:
        description: 'Request body for create permission'
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: code of the permission, must be unique
                module:
                  type: string
                  description: 'Module name'
                request_type:
                  type: array
                  items:
                    type: string
                  description: Array of HTTP request methods of the API like `PUT` , `POST` , `PATCH` , `GET` , `DELETE`.
                api_path:
                  type: string
                  description: URL of the api
                status:
                  type: string
                  description: Status of the permission.
              required:
                - code
                - module
                - request_type
                - api_path
            examples:
              example1:
                value:
                  code: create_project
                  module: project
                  request_type:
                    - POST
                  api_path: /scp/v1/project/create
                  status: ACTIVE
    parameters: []
  /scp/v1/permissions/update/{id}:
    post:
      summary: Update permissions by id
      tags:
        - Permissions
      description: |-
        You can use this API to update permission
         - The API Endpoint for updating permission is `/scp/v1/permissions/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
        - name: id
          in: path
          description: Id of the permission to update.
          required: true
          schema:
            type: number
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: string
                  description: Code of the permission
                module:
                  type: string
                  description: Module of the permission
                request_type:
                  type: array
                  items:
                    type: string
                  description: Request type of the API
                api_path:
                  type: string
                  description: URL of the api
                status:
                  type: string
                  description: Status of the permission
            examples:
              example1:
                value:
                  code: create_project
                  module: project
                  actions: WRITE
                  status: ACTIVE
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      Id:
                        type: number
                      status:
                        type: string
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission updated successfully
                    result:
                      id: 18
                      code: create_project
                      status: ACTIVE
                      module: project
                      request_type:
                        - POST
                      api_path: /scp/v1/project/create

        '400':
          description: Bad Request. Permission not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/permissions/updatePermission400Response'
  /scp/v1/permissions/getPermissions:
    get:
      summary: Get list of all permissions
      tags:
        - Permissions
      description: >-
        You can use this API to get the list of permissions 

         - The API Endpoint for getting a list of permissions is `/scp/v1/permissions/getPermissions` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: query
          name: limit
          description: Number of records per page
          required: false
          schema:
            type: number
          example: 2
        - in: query
          name: search
          description: Please search for information such as 'code'.
          required: false
          schema:
            type: string
          example: project
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      count:
                        type: number
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            code:
                              type: string
                            module:
                              type: string
                            request_type:
                              type: array
                            items:
                              type: string
                            api_path:
                              type: string
                            status:
                              type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permissions fetched successfully.
                    result:
                      data:
                        - id: 18
                          code: create_project
                          module: project
                          request_type:
                            - POST
                          status: ACTIVE
                          api_path: '/scp/v1/project/create'
                      count: 1
  /scp/v1/permissions/list:
    get:
      summary: Get list of permissions based on Role
      tags:
        - Permissions
      description: >-
        You can use this API to get the list of permissions 

         - The API Endpoint for getting a list of permissions is `/scp/v1/permissions/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: query
          name: limit
          description: Number of records per page
          required: false
          schema:
            type: number
          example: 2
        - in: query
          name: search
          description: Please search for information such as 'code'.
          required: false
          schema:
            type: string
          example: project
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        module:
                          type: string
                        request_type:
                          type: array
                          items:
                            type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permissions fetched successfully.
                    result:
                      - module: projects
                        request_type:
                          - POST
                          - GET
  /scp/v1/permissions/delete/{id}:
    delete:
      summary: Delete permission by id
      tags:
        - Permissions
      description: |-
        You can use this API to delete permission  
         - The API Endpoint for deleting permission is `/scp/v1/permissions/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the permission to delete.
          required: true
          schema:
            type: number
            example: 2
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission deleted successfully
                    result: {}
                    meta:
                      correlation: a3f7cde4-83f2-4143-a5c4-7e3291085cb4
        '400':
          description: Bad Request. Permission not found.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/permissions/updatePermission400Response'

  /scp/v1/role-permission-mapping/create/{role_id}:
    post:
      summary: Creating new role permission mapping
      tags:
        - Role Permission Mapping
      description: |-
        This API is associated with Role Permissions
         - Endpoint for creating Role Permission mapping  `/scp/v1/role-permission-mapping/create` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To make use of the API, you require X-auth-token. This is Available
            in login API Response.
          required: true
          schema:
            type: string
        - name: role_id
          in: path
          description: >-
            Pass the `role_id` to add permissions.
          required: true
          schema:
            type: number
          example: 2
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                permission_id:
                  type: number
                  description: id of the Permission
              required:
                - permission_id
            examples:
              example1:
                value:
                  permission_id: 1
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      role_title:
                        type: number
                      permissionId:
                        type: number
                      module:
                        type: string
                      request_type:
                        type: array
                        items:
                          type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission added to the role
                    result:
                      role_title: CONTENT_CREATOR
                      permissionId: 1
                      module: project
                      request_type:
                        - POST

        '400':
          description: Bad request. Permission for this role already exists
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      correlation:
                        type: string
                  message:
                    type: string
              examples:
                example1:
                  value:
                    responseCode: CLIENT_ERROR
                    error: []
                    message: Permission for this role already exists

    parameters: []
  /scp/v1/role-permission-mapping/list:
    get:
      summary: Get list of role permissions
      tags:
        - Role Permission Mapping
      description: |-
        You can use this API to get a list of role permissions
         - The API Endpoint for getting a list of permissions is `/scp/v1/role-permission-mapping/list` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          required: true
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      permissions:
                        type: array
                        items:
                          type: object
                          properties:
                            module:
                              type: string
                            request_type:
                              type: array
                              items:
                                type: string
                      count:
                        type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permissions list fetched successfully
                    result:
                      permissions:
                        - module: entity-type
                          request_type:
                            - POST,
                            - DELETE,
                            - GET,
                            - PUT,
                            - PATCH
                      count: 1
  /scp/v1/role-permission-mapping/delete/{role_id}:
    post:
      summary: Delete rolePermissionMapping by id
      tags:
        - Role Permission Mapping
      description: |-
        You can use this API to delete Role Permission mapping
         - The API Endpoint for deleting Role Permissions mapping is `/scp/v1/role-permission-mapping/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: role_id
          in: path
          description: >-
            Pass the `role_id` to add permissions.
          required: true
          schema:
            type: number
          example: 2
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                permission_id:
                  type: number
                  description: id of the permission
              required:
                - permission_id
            examples:
              example1:
                value:
                  permission_id: 1
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties: {}

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Permission delete from the role
                    result: {}

        '400':
          description: Bad Request. Permission for this role is empty.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/role-permission/createMapping400Response'

  /scp/v1/entity-types/create:
    post:
      summary: Create entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to create a user entity type  
         - The API Endpoint for creating a user entity is `/scp/v1/entity-types/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                  description: Unique identifier for the entity type.
                label:
                  type: string
                  description: Descriptive label for the entity type.
                type:
                  type: string
                  description: Type of the entity (e.g., SYSTEM, USER).
                allow_filtering:
                  type: boolean
                  description: Indicates whether filtering is allowed for this entity type.
                data_type:
                  type: string
                  description: Data type of the entity.
                has_entities:
                  type: boolean
                  description: Indicates whether the entity type has associated entities.
              required: []
            examples:
              example1:
                value:
                  value: ln
                  label: Languages
                  type: SYSTEM
                  allow_filtering: false
                  data_type: STRING
                  has_entities: true
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      allow_filtering:
                        type: boolean
                      data_type:
                        type: string
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      has_entities:
                        type: boolean
                  field_0:
                    type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type created successfully
                    result:
                      id: 1
                      value: ln
                      label: Languages
                      status: ACTIVE
                      allow_filtering: false
                      data_type: STRING
                      has_entities: true
                      created_by: 1
                      updated_by: 1
                      updated_at: '2023-09-22T12:40:19.817Z'
                      created_at: '2023-09-22T12:40:19.817Z'

        '400':
          description: Bad Request. Entity-Type already exists.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/createUserEntity400Response'
  /scp/v1/entity-types/update/{id}:
    post:
      summary: Update entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to update an entity type
         - The API Endpoint for updating an entity type is `/scp/v1/entity-types/update` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Please append a valid entity type ID to the request URL.
          required: true
          schema:
            type: number
          example: 2
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                  description: Unique identifier for the entity type.
                label:
                  type: string
                  description: Descriptive label for the entity type.
                type:
                  type: string
                  description: Type of the entity (e.g., SYSTEM, USER).
                allow_filtering:
                  type: boolean
                  description: Indicates whether filtering is allowed for this entity type.
                data_type:
                  type: string
                  description: Data type of the entity.
                has_entities:
                  type: boolean
                  description: Indicates whether the entity type has associated entities.
            examples:
              example1:
                value:
                  value: ln
                  label: Languages
                  status: ACTIVE
                  type: SYSTEM
                  allow_filtering: false
                  data_type: string
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      created_by:
                        type: 'null'
                      updated_by:
                        type: number
                      allow_filtering:
                        type: boolean
                      data_type:
                        type: string
                      organization_id:
                        type: number
                      has_entities:
                        type: boolean
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      deleted_at:
                        type: 'null'

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type updated successfully
                    result:
                      id: 1
                      value: ln
                      label: Languages
                      status: ACTIVE
                      created_by: 5
                      updated_by: 5
                      allow_filtering: false
                      data_type: string
                      organization_id: 1
                      has_entities: true
                      created_at: '2023-09-06T12:01:09.025Z'
                      updated_at: '2023-09-22T12:47:42.510Z'
                      deleted_at: null

        '400':
          description: Bad Request. Entity type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/updateUserEntity400Response'
  /scp/v1/entity-types/read:
    post:
      summary: Read entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to retrieve a list of entity types. 
         - The API Endpoint for getting the list of entity types is `/scp/v1/entity-types/read` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: array
                  description: Entity type value
                  items:
                    type: string
                read_user_entity:
                  type: boolean
                  description: Use this param to get all entities, including user created entities.
            examples:
              example1:
                value:
                  value:
                    - ln
                  read_user_entity: false
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        value:
                          type: string
                        label:
                          type: string
                        status:
                          type: string
                        allow_filtering:
                          type: boolean
                        data_type:
                          type: string
                        created_at:
                          type: string
                        updated_at:
                          type: string
                        entities:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: number
                              entity_type_id:
                                type: number
                              value:
                                type: string
                              label:
                                type: string
                              status:
                                type: string
                              type:
                                type: string
                              created_at:
                                type: string
                              updated_at:
                                type: string
                        has_entities:
                          type: boolean
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type fetched successfully
                    result:
                      - id: 4
                        value: ln
                        label: Languages
                        status: ACTIVE
                        allow_filtering: false
                        data_type: STRING
                        has_entities: true
                        organization_id: 1
                        created_at: '2023-09-21T10:16:19.270Z'
                        updated_at: '2023-09-21T10:16:19.270Z'
                        entities:
                          - id: 13
                            entity_type_id: 4
                            value: ml
                            label: Malayalam
                            status: ACTIVE
                            type: SYSTEM
                            created_by: 1
                            updated_by: 1
                            created_at: '2023-09-21T10:16:33.583Z'
                            updated_at: '2023-09-21T10:16:33.583Z'
        '400':
          description: Bad Request. Entity-Type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'
  /scp/v1/entity-types/delete/{id}:
    delete:
      summary: Delete entity type
      tags:
        - Entity Types
      description: |-
        You can use this API to delete a user entity type 
         - The API Endpoint for deleting a user entity type is `/scp/v1/entity-types/delete` 
         - It is mandatory to provide values for parameters that are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Please append a valid entity type ID to the request URL.
          required: true
          schema:
            type: number
          example: 2
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity type deleted successfully
                    result: []

        '400':
          description: Bad Request. Entity-Type not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity-type/updateUserEntity400Response'

  /scp/v1/entities/create:
    post:
      summary: Create Entity
      tags:
        - Entity
      description: |-
        You can use this API to create a user entity  
         - The API Endpoint for creating a user entity is `/scp/v1/entities/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                  description: Unique identifier for the entity.
                label:
                  type: string
                  description: Descriptive label for the entity type.
                entity_type_id:
                  type: number
                  description: Id of the entity type.
            examples:
              example1:
                value:
                  value: en
                  label: English
                  entity_type_id: 4
      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      entity_type_id:
                        type: number
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity created successfully
                    result:
                      id: 1
                      value: en
                      label: English
                      status: ACTIVE
                      type: SYSTEM
                      entity_type_id: 1
                      created_by: 0
                      updated_by: 0
                      updated_at: '2023-07-21T21:46:41.392Z'
                      created_at: '2023-07-21T21:46:41.392Z'
                      deleted_at: 'null'
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. User Entity already exists.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/createEntity400Response'
  /scp/v1/entities/update/{id}:
    patch:
      summary: Update Entity
      tags:
        - Entity
      description: |-
        Use this API to update a entity.   
         - The API Endpoint to update a user entity is `/scp/v1/entities/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token, which is available in
            the login API response.
          required: true
          schema:
            type: string
        - in: path
          name: 'id'
          description: Please append a valid user entity ID to the Request URL.
          schema:
            type: number
          required: true
          example: 1
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                value:
                  type: string
                  description: Unique identifier for the entity.
                label:
                  type: string
                  description: Descriptive label for the entity type.
                entity_type_id:
                  type: number
                  description: Id of the entity type.
            examples:
              example1:
                value:
                  value: english
                  label: English
                  status: ACTIVE
                  entity_type_id: 1
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      entity_type_id:
                        type: number
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity updated successfully
                    result:
                      id: 1
                      value: en
                      label: English
                      status: ACTIVE
                      type: SYSTEM
                      entity_type_id: 1
                      created_by: 0
                      updated_by: 0
                      updated_at: '2023-07-21T21:46:41.392Z'
                      created_at: '2023-07-21T21:46:41.392Z'
                      deleted_at: null
                    meta:
                      formsVersion: []

        '400':
          description: Bad Request. User Entity Not Found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'
  /scp/v1/entities/read/{id}:
    get:
      summary: Get entity details
      tags:
        - Entity
      description: |-
        Use this API to read the details of a user entity.   
         - The API Endpoint for reading the details of the user entity is `/scp/v1/entities/read` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token, which is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid entity ID.
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      entity_type_id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      created_by:
                        type: number
                      updated_by:
                        type: number
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      deleted_at:
                        type: 'null'
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity fetched successfully
                    result:
                      - id: 1
                        entity_type_id: 1
                        value: english
                        label: English
                        status: ACTIVE
                        type: SYSTEM
                        created_by: 0
                        updated_by: 1
                        created_at: '2023-07-21T21:46:41.392Z'
                        updated_at: '2023-07-21T21:47:50.202Z'
                        deleted_at: null
                    meta:
                      formsVersion: []
    parameters: []
  /scp/v1/entities/delete/{id}:
    delete:
      summary: Delete entity
      tags:
        - Entity
      description: |-
        You can use this API to delete a user entity.   
         - The API Endpoint for deleting a user entity is `/scp/v1/entities/delete` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null
         - This is an Admin API which will be used by admins.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: 'id'
          required: true
          description: Please append a valid user entity ID to the Request URL.
          schema:
            type: integer
          example: 2
      responses:
        '202':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity deleted successfully
                    result: []
                    meta:
                      formsVersion: []
                      correlation: 2f8b1d3d-0a25-4dda-ae5f-8d8bb9dd9282
        '400':
          description: Bad Request. User Entity has already been deleted.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/entity/updateUserEntity400Response'
  /scp/v1/entities/list:
    post:
      operationId: entitylist
      summary: Get entity list with pagination and search
      tags:
        - Entity
      description: |-
        Use this API to get the list of a mentoring entities.   
         - The API Endpoint for reading the list of the entities is `/scp/v1/entities/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token, which is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: path
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 10
        - in: path
          name: search
          description: search text
          schema:
            type: string
          example: teacher
        - in: path
          name: entity_type_id
          description: entity_type_id
          required: true
          schema:
            type: number
          example: teacher
      responses:
        '200':
          description: Accepted
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      entity_type_id:
                        type: number
                      value:
                        type: string
                      label:
                        type: string
                      status:
                        type: string
                      type:
                        type: string
                      created_by:
                        type: number
                      created_at:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Entity fetched successfully
                    result:
                      data:
                        - id: 1
                          entity_type_id: 1
                          value: english
                          label: English
                          status: ACTIVE
                          type: SYSTEM
                          created_by: 0
                          created_at: '2023-07-21T21:46:41.392Z'
                      count: 1

                    meta:
                      formsVersion: []
                      correlation: 0d392602-cb68-4690-8f38-3d3de9f94198
                      meeting_platform: BBB
                    parameters: []
  /scp/v1/cloud-services/getSignedUrl:
    post:
      summary: Cloud services get signed url
      tags:
        - Cloud Services
      description: |-
        This API is associated with the cloud services for getting signed URL  
         - Then The API Endpoint forcloud services `/scp/v1/cloud-services/file/getSignedUrl` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                request:
                  description: |
                    Add Resource id inside request, which can be a project id, observation id, etc.
                    Additionally, append the valid file names in the files.
                  type: object

                ref:
                  type: string
                  description: Only add ref as certificate if uploading the certificate templates
              required:
                - request
                - ref
            examples:
              example1:
                value:
                  request:
                    1:
                      files:
                        - certificsteBase.png
                  ref: certificate
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Signed URL Generated Successfully.
                    result:
                      '5f72f9998925ec7c60f79a91':
                        files:
                          - file: 'survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/uploadFile.jpg'
                            url: 'https://sunbirdstagingpublic.blob.core.windows.net/samiksha/survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/uploadFile.jpg?sv=2023-01-03&st=2024-05-08T03%3A02%3A44Z&se=2024-05-10T15%3A02%3A44Z&sr=b&sp=w&sig=PBRkJWgXdAPgx4RHSZ6aUevzWo1x2XMMQKBoNHQvBkk%3D'
                            payload:
                              sourcePath: 'survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/uploadFile.jpg'
                            cloudStorage: 'AZURE'
                          - file: 'survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/response.png'
                            url: 'https://sunbirdstagingpublic.blob.core.windows.net/samiksha/survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/response.png?sv=2023-01-03&st=2024-05-08T03%3A02%3A44Z&se=2024-05-10T15%3A02%3A44Z&sr=b&sp=w&sig=4fERc3ERoruUiA1YXquTWRnOnP9DzaVxn4uFjqBmSF8%3D'
                            payload:
                              sourcePath: 'survey/5f72f9998925ec7c60f79a91/54dc2814-e815-4ed9-8a58-6464785a1f2c/5334964f-f531-45a9-aa05-06a4d2beb352/response.png'
                            cloudStorage: 'AZURE'
  /scp/v1/cloud-services/getDownloadableUrl?filePath={filePath}:
    get:
      summary: Cloud services get download url
      tags:
        - Cloud Services
      description: >-
        This API is associated with the cloud services for getting downloadable
        URL  
         - Then The API Endpoint forcloud services `/scp/v1/cloud-services/file/getDownloadableUrl` 
         - It is mandatory to provide values for parameters marked with `required` 
         - Mandatory parameter cannot be empty or null
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            You require an X-auth-token to use this API. This token is available
            in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: filePath
          required: true
          description: Please append a valid file path to url which has to be downloaded
          schema:
            type: string
          example: users/62832531a05cbd57b273aebb-1654149589875-image.jpg
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $ref: >-
                  #/components/schemas/cloud-services/cloudServicesDownloadResponse200

  /scp/v1/form/create:
    post:
      operationId: formCreate
      summary: Create Form
      tags:
        - Form
      description: |-
        You can use this API to create a form  
         - The API Endpoint for creating a form is `/scp/v1/form/create` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: string
                  description: The type of the form.
                sub_type:
                  type: string
                  description: The sub-type or category of the form.
                data:
                  description: The main data structure for the form.
                  type: object
                  properties:
                    template_name:
                      type: string
                    fields:
                      type: object
                      properties:
                        controls:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              label:
                                type: string
                              value:
                                type: string
                              class:
                                type: string
                              type:
                                type: string
                              position:
                                type: string
                              validators:
                                type: object
                                properties:
                                  required:
                                    type: boolean
                                  min_length:
                                    type: number
                              disabled:
                                type: boolean
                              show_select_all:
                                type: boolean
                            required:
                              - name
                              - label
                              - value
                              - class
                              - type
                              - position
                              - validators
                              - disabled
                              - show_select_all
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
                  data:
                    template_name: defaultTemplate
                    fields:
                      controls:
                        - name: title
                          label: title
                          value: ''
                          class: ion-margin
                          type: text
                          position: floating
                          validators:
                            required: true
                            min_length: 5
                        - name: categories
                          label: Select categories
                          value: ''
                          class: ion-margin
                          type: chip
                          position: ''
                          disabled: false
                          show_select_all: true
                          validators:
                            required: true

      responses:
        '201':
          description: Created
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      type:
                        type: string
                      sub_type:
                        type: string
                      data:
                        type: object
                        properties:
                          template_name:
                            type: string
                          fields:
                            type: object
                            properties:
                              controls:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    label:
                                      type: string
                                    value:
                                      type: string
                                    class:
                                      type: string
                                    type:
                                      type: string
                                    position:
                                      type: string
                                    validators:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                        min_length:
                                          type: number
                                    disabled:
                                      type: boolean
                                    show_select_all:
                                      type: boolean
                                  required:
                                    - name
                                    - label
                                    - value
                                    - class
                                    - type
                                    - position
                                    - validators
                                    - disabled
                                    - show_select_all
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form created successfully
                    result:
                      id: 16
                      type: project
                      sub_type: createProject
                      data:
                        template_name: defaultTemplate
                        fields:
                          controls:
                            - name: title
                              label: title
                              value: ''
                              class: ion-margin
                              type: text
                              position: floating
                              validators:
                                required: true
                                min_length: 5
                            - name: categories
                              label: Select categories
                              value: ''
                              class: ion-margin
                              type: chip
                              position: ''
                              disabled: false
                              show_select_all: true
                              validators:
                                required: true

                      updated_at: '2023-07-18T20:48:10.492Z'
                      created_at: '2023-07-18T20:48:10.492Z'
                      deleted_at: null
                      organization_id: 1
                    meta:
                      formsVersion:
                        - id: 16
                          type: session

        '400':
          description: Bad Request. Form already exists
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/createForm400Response'
  /scp/v1/form/update/{formId}:
    patch:
      operationId: formUpdate
      summary: Update form
      tags:
        - Form
      description: |-
        You can use this API to update a form.  
         - The API Endpoint for updating a form is `/scp/v1/form/update/{formId}` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: formId
          description: Please append a valid form Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: string
                  description: The type of the form.
                sub_type:
                  type: string
                  description: The sub-type or category of the form.
                data:
                  description: The main data structure for the form.
                  properties:
                    template_name:
                      type: string
                    fields:
                      type: object
                      properties:
                        controls:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              label:
                                type: string
                              value:
                                type: string
                              class:
                                type: string
                              type:
                                type: string
                              position:
                                type: string
                              validators:
                                type: object
                                properties:
                                  required:
                                    type: boolean
                                  min_length:
                                    type: number
                              disabled:
                                type: boolean
                              show_select_all:
                                type: boolean
                            required:
                              - name
                              - label
                              - value
                              - class
                              - type
                              - position
                              - validators
                              - disabled
                              - show_select_all
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
                  data:
                    template_name: Test
                    fields:
                      controls:
                        - name: title
                          label: title
                          value: ''
                          class: ion-margin
                          type: text
                          position: floating
                          validators:
                            required: true
                            min_length: 5
                        - name: categories
                          label: Select categories
                          value: ''
                          class: ion-margin
                          type: chip
                          position: ''
                          disabled: false
                          show_select_all: true
                          validators:
                            required: true

      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: array
                    items:
                      type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form updated successfully
                    result: []
                    meta:
                      formsVersion:
                        - id: 16
                          type: project

        '400':
          description: Bad Request. Form not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/updateForm400Response'
  /scp/v1/form/read/{formId}:
    post:
      operationId: formRead
      summary: Get form data
      tags:
        - Form
      description: |-
        You can use this API to read data from a form.  
         - The API Endpoint to read form data is `/scp/v1/form/read/{formID}` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This token is
            available in the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: formId
          description: Please append a valid form Id to the Request URL.
          schema:
            type: number
          required: false
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                type:
                  type: string
                  description: The type of the form.
                sub_type:
                  type: string
                  description: The sub-type or category of the form.
            examples:
              example1:
                value:
                  type: project
                  sub_type: createProject
      responses:
        '200':
          description: ok
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                      type:
                        type: string
                      sub_type:
                        type: string
                      data:
                        type: object
                        properties:
                          template_name:
                            type: string
                          fields:
                            type: object
                            properties:
                              controls:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    label:
                                      type: string
                                    value:
                                      type: string
                                    class:
                                      type: string
                                    type:
                                      type: string
                                    position:
                                      type: string
                                    validators:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                        min_length:
                                          type: number
                                    disabled:
                                      type: boolean
                                    show_select_all:
                                      type: boolean
                                  required:
                                    - name
                                    - label
                                    - value
                                    - class
                                    - type
                                    - position
                                    - validators
                                    - disabled
                                    - show_select_all
                      updated_at:
                        type: string
                      created_at:
                        type: string
                      deleted_at:
                        type: 'null'
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                      correlation:
                        type: string
                      meeting_platform:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Form fetched successfully
                    result:
                      id: 16
                      type: project
                      sub_type: createProject
                      data:
                        template_name: defaultTemplate
                        fields:
                          controls:
                            - name: title
                              label: title
                              value: ''
                              class: ion-margin
                              type: text
                              position: floating
                              validators:
                                required: true
                                min_length: 5
                            - name: categories
                              label: Select categories
                              value: ''
                              class: ion-margin
                              type: chip
                              position: ''
                              disabled: false
                              show_select_all: true
                              validators:
                                required: true
                      updated_at: '2023-07-18T20:48:10.492Z'
                      created_at: '2023-07-18T20:48:10.492Z'
                      deleted_at: null
                      organization_id: 1
                    meta:
                      formsVersion:
                        - id: 16
                          type: project

        '400':
          description: Bad Request.Form not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/form/updateForm400Response'

  /scp/v1/projects/update/{projectId}:
    post:
      summary: Create or Update Project
      tags:
        - Projects
      description: |-
        You can use this API to update a project 
         - The API Endpoint for update a project is `/scp/v1/projects/update/{id}` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: For creating the project, id is not required. For update please append a valid project Id to the Request URL.
          schema:
            type: number
          required: false
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                  description: The title of the project
                categories:
                  description: Categories associated with the project
                  type: object
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                recommended_duration:
                  description: Object containing information about the recommended duration.
                  type: object
                  properties:
                    type:
                      type: string
                      description: Type of recommended duration (e.g., "days", "hours").
                    number:
                      description: The numeric value representing the recommended duration.
                      type: number
                keywords:
                  type: array
                  items:
                    type: string
                  description: The keywords associated with the project.
                recommended_for:
                  description: List of recommended designations for the project.
                  type: object
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                languages:
                  description: List of languages associated with the project.
                  type: object
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                learning_resources:
                  description: List of learning resources related to the project.
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        description: The name of the learning resource.
                        type: string
                      url:
                        description: The URL of the learning resource.
                        type: string
                solution_details:
                  type: object
                  description: Details about the observation solution.
                licence:
                  description: The license associated with the project.
                  type: object
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                task:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The ID of the task.
                      name:
                        type: string
                        description: The name of the task.
                      type:
                        type: string
                        description: The type of the task. content/observation
                      children:
                        description: List of child tasks.
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                      is_mandatory:
                        description: Indicates if the task is mandatory.
                        type: boolean
                      allow_evidences:
                        description: Indicates if evidence submission is allowed for the task.
                        type: boolean
                      learning_resources:
                        description: Evidence list
                        type: array
                        items:
                          type: object
                      evidence_details:
                        description: Details about evidence
                        type: object
                        properties:
                          file_types:
                            description: List of allowed file types for evidence submission.
                            type: array
                            items:
                              type: string
                          min_no_of_evidences:
                            description: The minimum number of evidences required.
                            type: string
                      sequence_no:
                        description: The sequence number of the task.
                        type: number
                certificate:
                  description: Details about the project certificate.
                  type: object
                  properties:
                    base_template_id:
                      type: number
                      description: The ID of the base certificate template.
                    base_template_url:
                      type: string
                      description: The url of the base certificate template.
                    issuer:
                      type: string
                      description: The issuer of the certificate.
                    logos:
                      type: array
                      items:
                        type: string
                    signatures:
                      type: array
                      items:
                        type: string
                    criteria:
                      description: Criteria for issuing the certificate.
                      type: object
                      properties:
                        expressions:
                          type: string
                        conditions:
                          type: object
                          properties:
                            C1:
                              type: object
                              properties:
                                validation_text:
                                  type: string
                                expression:
                                  type: string
                                conditions:
                                  type: object
                                  properties:
                                    C1:
                                      type: object
                                      properties:
                                        scope:
                                          type: string
                                        key:
                                          type: string
                                        function:
                                          type: string
                                        filter:
                                          type: object
                                          properties:
                                            key:
                                              type: string
                                            value:
                                              type: string
                                            operator:
                                              type: string
                                            value1:
                                              type: string

            examples:
              project creation:
                value:
                  title: Sample Project
              project with child tasks:
                value:
                  title: Sample Project
                  categories:
                    - label: Community
                      value: community
                  recommented_duration:
                    - type: week
                      number: 5
                  keywords: ['test']
                  recommeneded_for:
                    - label: HM
                      value: hm
                  languages:
                    - label: English
                      value: en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence:
                    - label: CC BY 4.0
                      value: cc_by_4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - Images
                          - Document
                          - Videos
                          - Audio
                        min_no_of_evidences: 5
                      sequence_no: 1
                      learning_resources:
                        - name: sample doc
                          url: 'http://test.com'
                      children:
                        - id: 0a8b13fb-c9e1-4296-8abd-8b64b357a128
                          name: child task 1
                          type: content
                          is_mandatory: true
                          allow_evidences: true
                          parent_id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                          sequence_no: 1

                  certificate: {}
              project without child tasks and certificates:
                value:
                  title: Sample Project
                  categories:
                    - label: Community
                      value: community
                  recommented_duration:
                    - type: week
                      number: 5
                  keywords: ['test']
                  recommeneded_for:
                    - label: HM
                      value: hm
                  languages:
                    - label: English
                      value: en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence:
                    - label: CC BY 4.0
                      value: cc_by_4.0
                  tasks:
                    - id: 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task without children'
                      type: content
                      is_mandatory: true
                      allow_evidences: true
                      evidence_details:
                        file_types:
                          - Images
                          - Document
                          - Videos
                          - Audio
                        min_no_of_evidences: 5
                      learning_resources:
                        - name: sample doc
                          url: 'http://test.com'
                      sequence_no: 1
                  certificate: {}
              project with task observation with certificate:
                value:
                  title: Sample Project
                  categories:
                    - label: Community
                      value: community
                  recommented_duration:
                    - type: week
                      number: 5
                  keywords: ['test']
                  recommeneded_for:
                    - label: HM
                      value: hm
                  languages:
                    - label: English
                      value: en
                  learning_resources:
                    - name: sample doc
                      url: 'http://test.com'
                  licence: CC BY 4.0
                  tasks:
                    - id: 3a8b13fb-c9e1-4296-8abd-8b64b357a128
                      name: 'task observation'
                      type: observation
                      is_mandatory: true
                      allow_evidences: true
                      children: []
                      evidence_details:
                        file_types:
                          - Images
                          - Document
                          - Videos
                          - Audio
                        min_no_of_evidences: 5
                      sequence_no: 1
                      solution_details:
                        id: 3
                        name: sample observation
                        min_no_of_submissions_required: 2
                        type: observation
                  certificate:
                    base_template_id: 5
                    base_template_url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                    code: two-logo-two-sign
                    name: Two Logo Two Signature
                    logos:
                      no_of_logos: 2
                      stateLogo1: https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                      stateLogo2: https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                    signature:
                      no_of_signature: 2
                      signatureImg1: https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                      signatureImg2: https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                    issuer: SPD
                    criteria:
                      expressions: C1&&C2
                      conditions:
                        C1:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: project
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                        C2:
                          validation_text: minimum no of evidences at project level
                          expression: C1
                          conditions:
                            C1:
                              scope: task
                              key: evidence
                              function: count
                              filter:
                                key: type
                                value: all
                              operator: '>='
                              value: 4
                              task_details:
                                - 7a8b13fb-c9e1-4296-8abd-8b64b357a128

      responses:
        '201':
          description: Project updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project updated successfully
                    result:
                      id: 1
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. Project Update Failed.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/createProject400Response'

    delete:
      summary: Delete Project
      tags:
        - Projects
      description: |-
        You can use this API to delete a project 
         - The API Endpoint for deleting project is `/scp/v1/project/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
          example: 1

      responses:
        '202':
          description: Project deleted successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project deleted successfully

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request. Project not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'

  /scp/v1/projects/submitForReview/{projectId}:
    post:
      summary: Submit for review
      tags:
        - Projects
      description: |-
        You can use this API to submit the project for review
        - The API Endpoint for submit the project for review is `/scp/v1/projects/submitForReview` 
        - It is mandatory to provide values for parameters which are marked as `required` 
        - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                reviewer_id:
                  description: The IDs of the reviewers assigned to review the project.
                  type: array
                  items:
                    type: string
            examples:
              example1:
                summary: Example when user selects reviewers
                description: When user selects any reviewers, The reviewer user ids are send as an array and the resource will be assigned to those specific reviewers.
                value:
                  reviewer_ids: [23, 25]
              example2:
                summary: Example when user selects to send to all reviewers
                description: When user selects to send the resource to all reviewers, API is not expecting any body parameter and the resource will be available for all the reviewers according to other factors to review it.
                value: {}
      responses:
        '201':
          description: Project submitted for review successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project submitted for review successfully
                    result: {}
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'

  /scp/v1/resource/list:
    get:
      summary: Resource List
      tags:
        - Resource
      description: |-
        You can use this API to list resources like project
         - The API Endpoint for listing resources is `/scp/v1/resource/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
          example: 1
        - name: limit
          in: query
          description: The limit of projects per page.
          required: false
          schema:
            type: integer
          example: 10
        - name: search
          in: query
          description: The search value to filter projects based on title.
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Type of the resource
          required: false
          schema:
            type: string
          example: project
        - name: status
          in: query
          description: The status of the resource
          required: false
          schema:
            type: string
          example: DRAFT
        - name: page_status
          in: query
          description: To identify the page from frontend. Values can be ['drafts','up_for_review','submitted_for_review']
          required: true
          schema:
            type: string
          example: DRAFT
        - name: sort_by
          in: query
          description: Sort the response by status or title of the resource. Default sorting is by title. If the user chooses to sort by status, they should include this key in the request
          required: false
          schema:
            type: string
          example: status
        - name: sort_order
          in: query
          description: Sort order (ascending or descending).
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
          example: asc

      responses:
        '200':
          description: project listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                      count:
                        type: number

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project listed successfully
                    result:
                      data:
                        - id: 4
                          title: sample project
                          type: project
                          organization:
                            id: 24
                            name: Shikshalokam
                            code: sl
                          status: DRAFT
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projecsuccessfullytCreation
                          version: 3

  /scp/v1/resource/upForReview:
    get:
      summary: Up For Review Resource List
      tags:
        - Resource
      description: |-
        You can use this API to list resources which are up for review for the reviewers
         - The API Endpoint : `/scp/v1/resource/upForReview` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
          example: 1
        - name: limit
          in: query
          description: The limit of projects per page.
          required: false
          schema:
            type: integer
          example: 10
        - name: search
          in: query
          description: The search value to filter projects based on title.
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Type of the resource
          required: false
          schema:
            type: string
          example: project
        - name: status
          in: query
          description: Pass status INPROGRESS to get the resources which are review in progress.
          required: false
          schema:
            type: string
          example: INPROGRESS
        - name: sort_by
          in: query
          description: Sort the response by status or title of the resource. Default sorting is by title. If the user chooses to sort by status, they should include this key in the request
          required: false
          schema:
            type: string
          example: status
        - name: sort_order
          in: query
          description: Sort order (ascending or descending).
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
          example: asc

      responses:
        '200':
          description: project listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                      count:
                        type: number

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Resource listed successfully
                    result:
                      data:
                        - id: 4
                          title: sample project
                          type: project
                          organization:
                            id: 24
                            name: Shikshalokam
                            code: sl
                          status: INPROGRESS
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projecsuccessfullytCreation
                          version: 3
  /scp/v1/resource/publishCallback:
    post:
      summary: Callback URL for Update Published Resource
      tags:
        - Resource
      description: |-
        You can use this API to update the resource details after publishing the resource in consumption portal
         - The API Endpoint : `/scp/v1/resource/publishCallback` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: resource_id
          in: query
          description: Resource id
          required: false
          schema:
            type: integer
          example: 1
        - name: published_id
          in: query
          description: Consumption side resource id
          required: false
          schema:
            type: string
          example: 10

      responses:
        '200':
          description: Resource updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Resource updated successfully

                    meta:
                      formsVersion:
                        - id: 3
                          type: projecsuccessfullytCreation
                          version: 3
  /scp/v1/projects/details/{projectId}:
    post:
      summary: Project Details
      tags:
        - Projects
      description: |-
        You can use this API to get project details
         - The API Endpoint for get project details is `/scp/v1/project/details` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true
          example: 2

      responses:
        '200':
          description: Project fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      categories:
                        type: array
                        items:
                          type: string
                      recommented_duration:
                        type: object
                        properties:
                          type:
                            type: string
                          number:
                            type: number
                      keywords:
                        type: string
                      recommeneded_for:
                        type: array
                        items:
                          type: string
                      languages:
                        type: array
                        items:
                          type: string
                      learning_resources:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            url:
                              type: string
                      solution_details:
                        type: object

                      licence:
                        type: string
                      task:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            type:
                              type: string
                            children:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                            is_mandatory:
                              type: boolean
                            allow_evidences:
                              type: boolean
                            evidence_details:
                              type: object
                              properties:
                                file_types:
                                  type: array
                                  items:
                                    type: string
                                min_no_of_evidences:
                                  type: string
                            sequence_no:
                              type: number
                      certificate:
                        type: object
                        properties:
                          base_template_id:
                            type: number
                          issuer:
                            type: string
                          logos:
                            type: array
                            items:
                              type: string
                          signatures:
                            type: array
                            items:
                              type: string
                          criteria:
                            type: object
                            properties:
                              expressions:
                                type: string
                              conditions:
                                type: object
                                properties:
                                  C1:
                                    type: object
                                    properties:
                                      validation_text:
                                        type: string
                                      expression:
                                        type: string
                                      conditions:
                                        type: object
                                        properties:
                                          C1:
                                            type: object
                                            properties:
                                              scope:
                                                type: string
                                              key:
                                                type: string
                                              function:
                                                type: string
                                              filter:
                                                type: object
                                                properties:
                                                  key:
                                                    type: string
                                                  value:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  value1:
                                                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Project fetched successfully
                    result:
                      id: 1
                      status: IN_REVIEW
                      organization:
                        id: 2
                        name: Shikshlokam
                        code: SL
                      organization_id: 2
                      reviewers:
                        - id: 24
                          name: Raven
                          status: REQUEST_FOR_CHANGES
                      title: Sample Project
                      categories:
                        - label: communication
                          value: communication
                      recommented_duration:
                        type: week
                        number: 5
                      keywords: test
                      recommeneded_for:
                        - label: HM
                          value: hm
                      languages:
                        - label: English
                          value: en
                      learning_resources:
                        - name: sample doc
                          url: 'http://test.com'
                      licence: CC BY 4.0
                      tasks:
                        - id: 3a8b13fb-c9e1-4296-8abd-8b64b357a128
                          name: 'task observation'
                          type: observation
                          is_mandatory: true
                          allow_evidences: true
                          children: []
                          evidence_details:
                            file_types:
                              - Images
                              - Document
                              - videos
                              - Audio
                            min_no_of_evidences: 5
                          sequence_no: 1
                          solution_details:
                            id: 3
                            name: sample observation
                            min_no_of_submissions_required: 2
                            type: observation
                      certificate:
                        base_template_id: 5
                        base_template_url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                        code: two-logo-two-sign
                        name: Two Logo Two Signature
                        logos:
                          no_of_logos: 2
                          stateLogo1: https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                          stateLogo2: https://unsplash.com/photos/two-people-sitting-on-a-couch-playing-video-games-xoT1rt09NEI
                        signature:
                          no_of_signature: 2
                          signatureImg1: https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                          signatureImg2: https://unsplash.com/photos/person-in-orange-long-sleeve-shirt-writing-on-white-paper-doplSDELX7E
                        issuer: SPD
                        criteria:
                          expressions: C1&&C2
                          conditions:
                            C1:
                              validation_text: minimum no of evidences at project level
                              expression: C1
                              conditions:
                                C1:
                                  scope: project
                                  key: evidence
                                  function: count
                                  filter:
                                    key: type
                                    value: all
                                  operator: '>='
                                  value: 4
                            C2:
                              validation_text: minimum no of evidences at project level
                              expression: C1
                              conditions:
                                C1:
                                  scope: task
                                  key: evidence
                                  function: count
                                  filter:
                                    key: type
                                    value: all
                                  operator: '>='
                                  value: 4
                                  task_details:
                                    - 7a8b13fb-c9e1-4296-8abd-8b64b357a128
                      comments:
                        - id: 2
                          comment: correct spelling
                          context: page
                          page: 1
                          status: RESOLVED
                          parent_id: 0
                          user_id: 24
                          commenter:
                            id: 24
                            name: Priyanka
                          is_read: true
                          resolved_by: 25
                          resolver:
                            id: 25
                            name: Adithya
                          resolved_at: '2024-04-11T06:43:43.995Z'

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'
  /scp/v1/projects/reviewerList:
    get:
      summary: Reviewer List
      tags:
        - Projects
      description: |-
        You can use this API to get the list all project reviewers
         - The API Endpoint for comment list is `/scp/v1/projects/reviewerList` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Reviewer list fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      resource_id:
                        type: string
                      comments:
                        type: array
                        items:
                          type: object
                      count:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Reviewer list fetched successfully
                    result:
                      data:
                        - id: 1
                          name: Priyanka
                          organization_id: 2
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                        - id: 2
                          name: Adithya
                          organization_id: 2
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                        - id: 3
                          name: Ankit
                          organization_id: 2
                          organization:
                            id: 2
                            name: Shikshalokam
                            code: sl
                      count: 3
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/projects/publish/{projectId}:
    get:
      summary: Project Publish
      tags:
        - Projects
      description: |-
        You can use this API to publish the project
         - The API Endpoint for publish project is `/scp/v1/projects/publish` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: projectId
          description: Please append a valid project Id to the Request URL.
          schema:
            type: number
          required: true

      responses:
        '200':
          description: project published successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project published successfully
                    result:
                      id: 3
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/project/deleteProject400Response'

  /scp/v1/reviews/update/{resourceId}:
    post:
      summary: Create or Update Review
      tags:
        - Review
      description: |-
        You can use this API to create or request for changes
         - The API Endpoint is `/scp/v1/reviews/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
         - comment can be array or array of object. 
         - Pass the id of the comment in comment object if the current status of the comment is DRAFT. And pass the comment status as OPEN.
         - While reviewing the resource reviewer can create the comment with draft status. That will be available to the creator if reviewer is doing action either approve, reject, report or changes requested
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                comment:
                  description: Comment can be an array or an object. Incase if the reviewer is saving the review as draft , once it is completed the draft comment needs to me send in the body of the api.

            examples:
              example1:
                value:
                  comment:
                    comment: 'Check spelling'
                    context: page
                    page: 1
      responses:
        '200':
          description: project review updated
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: project review updated successfully
                    result: {}
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/reviews/approve/{resourceId}:
    post:
      summary: Approve Resource
      tags:
        - Review
      description: |-
        You can use this API to approve the resource
         - The API Endpoint for update review status is `/scp/v1/reviews/approve` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                comment:
                  description: Comment can be an array or an object. Incase if the reviewer is saving the review as draft , once it is completed the draft comment needs to me send in the body of the api.

            examples:
              example1:
                value:
                  comment:
                    comment: 'Check spelling'
                    context: page
                    page: 1
      responses:
        '200':
          description: You have successfully published the resource
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: You have successfully published the resource
                    result: {}
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/reviews/rejectOrReport/{resourceId}:
    post:
      summary: Reject or Report Resource
      tags:
        - Review
      description: |-
        You can use this API to reject or report the resource
         - The API Endpoint is `/scp/v1/reviews/rejectOrReport` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                notes:
                  description: Reviewer can add the note if he is reporting the resource
                comment:
                  description: Comment can be an array or an object. Incase if the reviewer is saving the review as draft , once it is completed the draft comment needs to me send in the body of the api.

            examples:
              example1:
                value:
                  notes: 'invalid project'
                  comment:
                    comment: 'Check spelling'
                    context: page
                    page: 1
      responses:
        '200':
          description: This resource has been rejected and reported
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: This resource has been rejected and reported
                    result: {}
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /scp/v1/comments/update/{id}?resource_id={resource_id}:
    post:
      summary: Add or Update Comment
      tags:
        - Comment
      description: |-
        You can use this API to create or update comment
         - The API Endpoint for adding or updating a comment is `/scp/v1/comments/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid comment Id to the Request URL.
          schema:
            type: number
          required: false
          example: 2
        - in: query
          name: resource_id
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true
          example: 1
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                comment:
                  type: string
                  description: The actual content of the comment
                context:
                  type: string
                  description: Context of the comment (e.g., "page" or any tag)
                page:
                  type: string
                  description: Page number associated with the comment
                status:
                  type: string
                  description: Status of the comment (e.g., "OPEN").
                parent_id:
                  type: string
                  description: ID of the parent comment, if applicable

            examples:
              example1:
                value:
                  comment: 'Check spelling'
                  context: page
                  page: 1
                  status: OPEN
                  parent_id: 2

      responses:
        '201':
          description: Comment updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comment updated successfully
                    result:
                      id: 3
                      resource_id: 1
                      comment: 'Check spelling'
                      context: page
                      page: 1
                      status: OPEN
                      parent_id: 2
                      is_read: false
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request. Resource not found
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/comment/updateComment400Response'

  /scp/v1/comments/list?resource_id={resource_id}:
    get:
      summary: Comment List
      tags:
        - Comment
      description: |-
        You can use this API to get the list all comments
         - The API Endpoint for get the list of comments is `/scp/v1/comments/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: query
          name: resource_id
          description: Please append a valid resource Id to the Request URL.
          schema:
            type: number
          required: true
          example: 1
        - in: query
          name: page_value
          description: Please append a valid page number or name.
          schema:
            type: string
          required: false
          example: task_page
        - in: query
          name: context
          description: Please append a valid context value like tag or page.
          schema:
            type: string
          required: false
          example: page

      responses:
        '200':
          description: Comment fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      resource_id:
                        type: string
                      comments:
                        type: array
                        items:
                          type: object
                      count:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Comment fetched successfully
                    result:
                      resource_id: 1
                      comments:
                        - id: 2
                          comment: 'Check spelling'
                          context: page
                          page: 1
                          status: RESOLVED
                          parent_id: 1
                          commenter:
                            id: 24
                            name: Priyanka
                          is_read: true
                          resolved_by: 25
                          resolver:
                            id: 25
                            name: Adithya
                          resolved_at: '2024-04-11T06:43:43.995Z'
                        - comment: 'Add valid title'
                          context: page
                          page: 1
                          status: UNRESOLVED
                          parent_id: null
                          commenter:
                            id: 24
                            name: Priyanka
                          is_read: true
                      count: 2
                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /scp/v1/organization-extensions/createConfig:
    post:
      summary: Create the organization configurations
      tags:
        - Organization
      description: |-
        You can use this API to create organization configurations, for example change the minimum number of approvals for the resource.
         - The API Endpoint for add organization configurations is `/scp/v1/organization-extensions/createConfig` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                show_reviewer_list:
                  type: boolean
                min_approval:
                  type: string
                resource_type:
                  type: string
                review_type:
                  type: string
                review_stages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      level:
                        type: number

            examples:
              review type parallel:
                value:
                  show_reviewer_list: true
                  min_approval: 2
                  resource_type: project
                  review_type: PARALLEL
              review type sequential:
                value:
                  show_reviewer_list: true
                  min_approval: 2
                  resource_type: project
                  review_type: SEQUENTIAL
                  review_stages:
                    - role: reviewer_level_1
                      level: 1
                    - role: reviewer_level_2
                      level: 2

      responses:
        '201':
          description: Config added successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      organization_id:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config added successfully
                    result:
                      organization_id: 3
                      show_reviewer_list: true
                      min_approval: 2
                      resource_type: project

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/organization/createConfig400Response'
  /scp/v1/organization-extensions/updateConfig/{id}?resource_type={resource_type}:
    post:
      summary: Update the organization configurations
      tags:
        - Organization
      description: |-
        You can use this API to update organization configurations, for example change the minimum number of approvals for the resource.
         - The API Endpoint for update organization configurations is `/scp/v1/organization-extensions/updateConfig` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid config Id to the Request URL.
          schema:
            type: number
          required: true
          example: 1
        - in: query
          name: resource_type
          description: Please append a valid resource type to the Request URL.
          schema:
            type: string
          required: true
          example: project
      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                show_reviewer_list:
                  type: boolean
                min_approval:
                  type: string

            examples:
              example1:
                value:
                  show_reviewer_list: true
                  min_approval: 2

      responses:
        '201':
          description: Config updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      organization_id:
                        type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config updated successfully
                    result:
                      organization_id: 3
                      show_reviewer_list: true
                      min_approval: 2
                      resource_type: project

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/organization/updateConfig400Response'
  /scp/v1/config/list:
    get:
      summary: List configurations
      tags:
        - Config APIs
      description: |-
        You can use this API to list organization configurations and instance level configurations
         - The API Endpoint for list all configurations is `/scp/v1/config/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      responses:
        '201':
          description: Config fetched successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Config fetched successfully
                    result:
                      data:
                        - show_reviewer_list: true
                          min_approval: 1
                          resource_type: project
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /scp/v1/certificate/update:
    post:
      summary: Create certificate base template
      tags:
        - Certificate
      description: |-
        You can use this API to create certificate base template 
         - The API Endpoint for create certificate base template  is `/scp/v1/certificate/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                code:
                  type: boolean
                name:
                  type: string
                url:
                  type: string
                meta:
                  type: object
                resource_type:
                  type: string

            examples:
              example1:
                value:
                  code: two-logo-two-sign
                  name: Two Logo Two Signature
                  resource_type: project
                  url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                  meta:
                    logos:
                      no_of_logos: 2
                      stateLogo1:
                      stateLogo2:
                    signature:
                      no_of_signature: 2
                      signatureImg1:
                      signatureImg2:

      responses:
        '201':
          description: Template created successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template created successfully
                    result:
                      id: 2
                      code: one-logo-one-sign
                      name: One Logo One Signature
                      resource_type: project
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                      meta:
                        logos:
                          no_of_logos: 2
                          stateLogo1:
                          stateLogo2:
                        signature:
                          no_of_signature: 2
                          signatureImg1:
                          signatureImg2:

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/certificate/createCertificate400Response'
  /scp/v1/certificate/update/{id}:
    post:
      summary: Update certificate base template
      tags:
        - Certificate
      description: |-
        You can use this API to update certificate base template 
         - The API Endpoint for update certificate base template  is `/scp/v1/certificate/update` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid certificate id to the Request URL.
          schema:
            type: string
          required: true
          example: 3

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                name:
                  type: string

            examples:
              example1:
                value:
                  name: Two Logo Two Signature

      responses:
        '201':
          description: Template updated successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template updated successfully
                    result:
                      id: 2
                      code: two-logo-two-sign
                      name: Two Logo Two Signature
                      resource_type: project
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                      meta:
                        logos:
                          no_of_logos: 2
                          stateLogo1:
                          stateLogo2:
                        signature:
                          no_of_signature: 2
                          signatureImg1:
                          signatureImg2:

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/certificate/updateCertificate400Response'
  /scp/v1/certificate/createSVG:
    post:
      summary: Edit Certificate SVG
      tags:
        - Certificate
      description: |-
        You can use this API to edit certificate svg 
         - The API Endpoint for edit certificate svg is `/scp/v1/certificate/createSVG` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string

      requestBody:
        content:
          application.json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                state_logo1:
                  type: boolean
                state_title:
                  type: string
                signature_img1:
                  type: string
                signature_title_name1:
                  type: string
                signature_title_designation1:
                  type: string

            examples:
              example1:
                value:
                  state_logo1: /user/state.png
                  state_title: Karnataka
                  signature_img1: /user/sign.png
                  signature_title_name1: Director
                  signature_title_designation1: SPD

      responses:
        '201':
          description: Template edited successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Template edited successfully
                    result:
                      url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3
  /scp/v1/certificate/list:
    get:
      summary: List Certificate Templates
      tags:
        - Certificate
      description: |-
        You can use this API to list certificate templates
         - The API Endpoint for list certificate templates is `/scp/v1/certificate/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: query
          name: resource_type
          description: Please add the resource type
          schema:
            type: string
          example: project
        - in: query
          name: page
          description: Please add page number
          schema:
            type: number
          example: 1
        - in: query
          name: limit
          description: Number of records to limit
          schema:
            type: number
          example: 2
        - in: query
          name: search
          description: Please search for information such as names
          schema:
            type: string
          example: one logo

      responses:
        '201':
          description: Certificate template listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Certificate template listed successfully
                    result:
                      data:
                        - id: 2
                          code: two-logo-two-sign
                          name: Two Logo Two Signature
                          resource_type: project
                          url: https://sunbirdstagingpublic.blob.core.windows.net/samiksha/certificateBASE_TEMPLATEs/_30-3-2024-1714461130260.svg?sv=2023-01-03&st=2024-04-30T07%3A12%3A10Z&se=2024-05-01T13%3A12%3A10Z&sr=b&sp=r&sig=kRGFlSbwSw5hHRqHMcDLVRGX%2Br8l2hxG5D2WnTU3Jpk%3D
                          meta:
                            logos:
                              no_of_logos: 2
                              stateLogo1:
                              stateLogo2:
                            signature:
                              no_of_signature: 2
                              signatureImg1:
                              signatureImg2:
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: projectCreation
                          version: 3

  /elevate-user/v1/user-role/create:
    post:
      summary: Create User Roles
      tags:
        - User Service APIS
      description: |
        Use this API to create an user Role.

        - Endpoint: `/elevate-user/v1/user-role/create`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                  description: Title of the user role.
                user_type:
                  type: number
                  description: The type of user. Expected values - 0 for SYSTEM roles, 1 for other roles (default).
                status:
                  type: string
                  description: status of the user role.  `ACTIVE` (default)
                visibility:
                  type: string
                  description: Visibility of the user role. `PUBLIC` (default)
              required:
                - title
                - user_type
                - status
            examples:
              example1:
                value:
                  title: content_creator
                  user_type: 1
                  status: ACTIVE
                  visibility: PUBLIC
      responses:
        '201':
          description: OK. Roles created successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      title:
                        type: string
                      user_type:
                        type: number
                      status:
                        type: string
                      visibility:
                        type: string
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Roles created successfully
                    result:
                      title: CONTENT_CREATOR
                      user_type: 1
                      status: ACTIVE
                      visibility: PUBLIC
                      organization_id: 3
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/createRole400Response'
  /elevate-user/v1/user-role/update/{id}:
    post:
      summary: Update User Roles
      tags:
        - User Service APIS
      description: |
        Use this API to update an user Role.

        - Endpoint: `/elevate-user/v1/user-role/update/{id}`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append a valid role id to the Request URL.
          schema:
            type: string
          required: true
          example: 3
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                title:
                  type: string
                user_type:
                  type: number
                status:
                  type: string
                visibility:
                  type: string
              required:
                - title
                - user_type
                - status
                - visibility
            examples:
              example1:
                value:
                  title: CONTENT_CREATOR
                  user_type: 1
                  status: ACTIVE
                  visibility: PUBLIC
      responses:
        '201':
          description: OK. Roles updated successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      title:
                        type: string
                      user_type:
                        type: number
                      status:
                        type: string
                      visibility:
                        type: string
                      organization_id:
                        type: number
                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string
                      correlation:
                        type: string
              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Roles updated successfully
                    result:
                      title: CONTENT_CREATOR
                      user_type: 1
                      status: ACTIVE
                      visibility: PUBLIC
                      organization_id: 3
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/updateRole400Response'
  /elevate-user/user/v1/org-admin/updateUser/{id}:
    post:
      summary: Update User Role and Organization
      tags:
        - User Service APIS
      description: |
        Use this API to update an user.

        - Endpoint: `/elevate-user/user/v1/org-admin/updateUser/{id}`
        - Provide values for parameters marked as `required`.
        - The X-auth-token is mandatory and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Please append user id to the Request URL.
          schema:
            type: string
          required: true
          example: 3
      requestBody:
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-04/schema#
              type: object
              properties:
                name:
                  type: string
                roles:
                  type: number
                organization_id:
                  type: string
              required:
                - title
                - user_type
                - status
                - visibility
            examples:
              example1:
                value:
                  roles: [content_creator]
                  organization_id: 1
      responses:
        '201':
          description: OK. User updated successfully
          content:
            application/json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: string

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: User updated successfully
                    meta:
                      formsVersion: []
        '400':
          description: Bad Request.
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/user/updateUser400Response'

  /scp/v1/observation/list:
    get:
      summary: Observations list
      tags:
        - Observation
      description: |-
        You can use this API to list Observation
         - The API Endpoint for listing Observation is `/scp/v1/observation/list` 
         - It is mandatory to provide values for parameters which are marked as `required` 
         - This is a mandatory parameter and cannot be empty or null.
      parameters:
        - name: X-auth-token
          in: header
          description: >-
            To use this API, you require an X-auth-token. This is available in
            the login API Response.
          required: true
          schema:
            type: string
        - name: sort_by
          in: query
          description: Sort the response by status or title of the resource. Default sorting is by title. If the user chooses to sort by status, they should include this key in the request
          required: false
          schema:
            type: string
          example: status
        - name: sort_order
          in: query
          description: Sort order (ascending or descending).
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']
          example: asc

      responses:
        '201':
          description: observation listed successfully
          content:
            application.json:
              schema:
                $schema: http://json-schema.org/draft-04/schema#
                type: object
                properties:
                  responseCode:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                      count:
                        type: number

                  meta:
                    type: object
                    properties:
                      formsVersion:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            type:
                              type: string
                            version:
                              type: number

              examples:
                example1:
                  value:
                    responseCode: OK
                    message: Observation listed successfully
                    result:
                      data:
                        - id: 4
                          title: sample observation
                          type: observation
                          organization:
                            id: 24
                            name: Shikshalokam
                            code: sl
                          status: DRAFT
                      count: 1

                    meta:
                      formsVersion:
                        - id: 3
                          type: observationsuccessfullytCreation
                          version: 3
components:
  schemas:
    module:
      updateModule400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: module not found
          error:
            type: array
            items:
              type: string
            example: []
      getModuleList400Response:
        type: object
        description: Module not found.
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Module not found.
          result:
            type: object
            properties:
              data:
                type: array
              count:
                type: integer
                example: 0
          error:
            type: array
            items:
              type: string
            example: []

    permissions:
      updatePermission400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: permission not found
          error:
            type: array
            items:
              type: string
            example: []

    role-permission:
      createMapping400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Permission for this role is empty
          error:
            type: array
            items:
              type: string
            example: []

    entity-type:
      createUserEntity400Response:
        type: object
        description: entity type already exist
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity type already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateUserEntity400Response:
        type: object
        description: Entity type not found
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity type not found
          error:
            type: array
            items:
              type: string
            example: []

    entity:
      createEntity400Response:
        type: object
        description: entity already exist
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateUserEntity400Response:
        type: object
        description: Entity not found
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Entity not found
          error:
            type: array
            items:
              type: string
            example: []

    cloud-services:
      cloudServicesDownloadResponse200:
        type: object
        properties:
          responseCode:
            type: string
            example: OK
          message:
            type: string
            example: Download URL Generated Successfully.
          result:
            type: string
            example: >-
              https://aws-bucket-storage-name.s3.ap-south-1.amazonaws.com/users/62832531a05cbd57b273aebb-1654149589875-image.jpg

    form:
      createForm400Response:
        description: Bad Request. Form Already Exist
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Form already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateForm400Response:
        description: Bad Request. Form not found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Form not found
          error:
            type: array
            items:
              type: string
            example: []

    project:
      createProject400Response:
        type: object
        description: project creation error.
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          error:
            type: array
            items:
              type: string
            example:
              - location: body
                param: title
                msg: title is invalid
              - location: body
                param: categories
                msg: categories required
      deleteProject400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: project not found
          error:
            type: array
            items:
              type: string
            example: []

    organization:
      createConfig400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Configuration already exist
          error:
            type: array
            items:
              type: string
            example: []

      updateConfig400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Configuration not found
          error:
            type: array
            items:
              type: string
            example: []

    comment:
      updateComment400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Comment not found
          error:
            type: array
            items:
              type: string
            example: []

    certificate:
      createCertificate400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: template already exist
          error:
            type: array
            items:
              type: string
            example: []
      updateCertificate400Response:
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: Template not found
          error:
            type: array
            items:
              type: string
            example: []

    user:
      createRole400Response:
        description: Bad Request. Role Already Exist
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User Role already exists
          error:
            type: array
            items:
              type: string
            example: []
      updateRole400Response:
        description: Bad Request. Role Not Found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User Role not found
          error:
            type: array
            items:
              type: string
            example: []
      updateUser400Response:
        description: Bad Request. User Not Found
        type: object
        properties:
          responseCode:
            type: string
            example: CLIENT_ERROR
          message:
            type: string
            example: User not found
          error:
            type: array
            items:
              type: string
            example: []

    config:
      $schema: http://json-schema.org/draft-04/schema#
      type: object
      properties:
        responseCode:
          type: string
        message:
          type: string
        result:
          type: object
          properties:
            meeting_platform:
              type: string
            reportIssue:
              type: object
              properties:
                to:
                  type: string
                subject:
                  type: string
        meta:
          type: object
          properties:
            formsVersion:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  type:
                    type: string
            correlation:
              type: string
    schema-1:
      type: object
      properties: {}
  securitySchemes:
    bearer:
      type: apiKey
      name: X-auth-token
      in: header
